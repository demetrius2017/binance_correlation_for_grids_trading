"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Grid Trading
"""

# –ò–º–∏—Ç–∏—Ä—É–µ–º session_state Streamlit
class MockSessionState:
    def __init__(self):
        self.transfer_params = None

def test_transfer_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º mock session_state
    session_state = MockSessionState()
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    mock_optimization_result = {
        'grid_range_pct': 25.0,
        'grid_step_pct': 1.5,
        'stop_loss_pct': 30.0,
        'combined_score': 12.34
    }
    
    mock_optimization_params = {
        'pair': 'BTCUSDT',
        'balance': 5000,
        'timeframe': '4h',
        'days': 180
    }
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ (–∫–∞–∫ –≤ app.py)
    session_state.transfer_params = {
        'pair': mock_optimization_params['pair'],
        'grid_range_pct': mock_optimization_result['grid_range_pct'],
        'grid_step_pct': mock_optimization_result['grid_step_pct'],
        'stop_loss_pct': mock_optimization_result['stop_loss_pct'],
        'initial_balance': mock_optimization_params['balance'],
        'timeframe': mock_optimization_params['timeframe'],
        'simulation_days': mock_optimization_params['days'],
        'source': f"–¢–µ—Å—Ç (—Å–∫–æ—Ä: {mock_optimization_result['combined_score']:.2f}%)"
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    assert session_state.transfer_params is not None, "transfer_params –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–∫–∞–∫ –≤ Grid Trading –≤–∫–ª–∞–¥–∫–µ)
    default_grid_range = session_state.transfer_params['grid_range_pct'] if session_state.transfer_params else 20.0
    default_grid_step = session_state.transfer_params['grid_step_pct'] if session_state.transfer_params else 1.0  
    default_balance = session_state.transfer_params['initial_balance'] if session_state.transfer_params else 1000
    default_days = session_state.transfer_params['simulation_days'] if session_state.transfer_params else 90
    default_stop_loss = session_state.transfer_params['stop_loss_pct'] if session_state.transfer_params else 25.0
    default_timeframe = session_state.transfer_params['timeframe'] if session_state.transfer_params else "1h"
    default_pair = session_state.transfer_params['pair'] if session_state.transfer_params else "ETHUSDT"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    assert default_grid_range == 25.0, f"–û–∂–∏–¥–∞–µ—Ç—Å—è 25.0, –ø–æ–ª—É—á–µ–Ω–æ {default_grid_range}"
    assert default_grid_step == 1.5, f"–û–∂–∏–¥–∞–µ—Ç—Å—è 1.5, –ø–æ–ª—É—á–µ–Ω–æ {default_grid_step}"
    assert default_balance == 5000, f"–û–∂–∏–¥–∞–µ—Ç—Å—è 5000, –ø–æ–ª—É—á–µ–Ω–æ {default_balance}"
    assert default_days == 180, f"–û–∂–∏–¥–∞–µ—Ç—Å—è 180, –ø–æ–ª—É—á–µ–Ω–æ {default_days}"
    assert default_stop_loss == 30.0, f"–û–∂–∏–¥–∞–µ—Ç—Å—è 30.0, –ø–æ–ª—É—á–µ–Ω–æ {default_stop_loss}"
    assert default_timeframe == "4h", f"–û–∂–∏–¥–∞–µ—Ç—Å—è '4h', –ø–æ–ª—É—á–µ–Ω–æ '{default_timeframe}'"
    assert default_pair == "BTCUSDT", f"–û–∂–∏–¥–∞–µ—Ç—Å—è 'BTCUSDT', –ø–æ–ª—É—á–µ–Ω–æ '{default_pair}'"
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print(f"üìä –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   ‚Ä¢ –ü–∞—Ä–∞: {default_pair}")
    print(f"   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏: {default_grid_range:.1f}%")
    print(f"   ‚Ä¢ –®–∞–≥ —Å–µ—Ç–∫–∏: {default_grid_step:.2f}%")
    print(f"   ‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: {default_stop_loss:.1f}%")
    print(f"   ‚Ä¢ –ë–∞–ª–∞–Ω—Å: {default_balance} USDT")
    print(f"   ‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º: {default_timeframe}")
    print(f"   ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {default_days} –¥–Ω–µ–π")
    print(f"   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {session_state.transfer_params['source']}")

if __name__ == "__main__":
    test_transfer_logic()
