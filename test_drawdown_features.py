"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Draw Down –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.grid_analyzer import GridAnalyzer
from modules.collector import BinanceDataCollector

def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    dates = pd.date_range(start='2024-01-01', end='2024-01-31', freq='H')
    np.random.seed(42)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
    prices = [100.0]
    for i in range(len(dates) - 1):
        change_pct = np.random.normal(0, 0.02)  # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        new_price = prices[-1] * (1 + change_pct)
        prices.append(max(new_price, 10.0))  # –ú–∏–Ω–∏–º—É–º 10$
    
    df = pd.DataFrame({
        'open': prices,
        'high': [p * (1 + abs(np.random.normal(0, 0.01))) for p in prices],
        'low': [p * (1 - abs(np.random.normal(0, 0.01))) for p in prices],
        'close': prices,
        'volume': [np.random.uniform(1000, 10000) for _ in prices]
    }, index=dates)
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º high/low
    df['high'] = df[['open', 'close', 'high']].max(axis=1)
    df['low'] = df[['open', 'close', 'low']].min(axis=1)
    
    return df

def test_advanced_metrics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    print("=== –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫ ===")
    
    # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç BinanceDataCollector
    class MockCollector(BinanceDataCollector):
        def __init__(self):
            # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º super().__init__(), —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
            self.client = None
    
    collector = MockCollector()
    analyzer = GridAnalyzer(collector)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∂—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫
    test_log = [
        {'net_pnl_usd': 50, 'balance_usd': 1050},
        {'net_pnl_usd': -20, 'balance_usd': 1030},
        {'net_pnl_usd': 30, 'balance_usd': 1060},
        {'net_pnl_usd': -10, 'balance_usd': 1050},
        {'net_pnl_usd': 40, 'balance_usd': 1090}
    ]
    
    metrics = analyzer.calculate_advanced_metrics(test_log, 1000.0)
    
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics['max_drawdown_pct']:.2f}%")
    print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {metrics['sharpe_ratio']:.3f}")
    print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ö–∞–ª—å–º–∞—Ä–∞: {metrics['calmar_ratio']:.3f}")
    print(f"Profit Factor: {metrics['profit_factor']:.2f}")
    
    return metrics

def test_drawdown_control():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ drawdown"""
    print("\n=== –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è Draw Down ===")
    
    # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç BinanceDataCollector
    class MockCollector(BinanceDataCollector):
        def __init__(self):
            # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º super().__init__(), —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
            self.client = None
    
    collector = MockCollector()
    analyzer = GridAnalyzer(collector)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–∏–ª—å–Ω—ã–º –ø–∞–¥–µ–Ω–∏–µ–º
    test_df = create_test_data()
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
    mid_point = len(test_df) // 2
    test_df.iloc[mid_point:mid_point+50] *= 0.4  # –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ 60%
    
    print(f"–¢–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(test_df)} —Ç–æ—á–µ–∫")
    
    # –¢–µ—Å—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è drawdown
    stats_long1, stats_short1, _, _ = analyzer.estimate_dual_grid_by_candles_realistic(
        df=test_df,
        initial_balance_long=1000,
        initial_balance_short=1000,
        grid_range_pct=10.0,
        grid_step_pct=1.0,
        max_drawdown_pct=None,  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        debug=False
    )
    
    # –¢–µ—Å—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º drawdown 20%
    stats_long2, stats_short2, _, _ = analyzer.estimate_dual_grid_by_candles_realistic(
        df=test_df,
        initial_balance_long=1000,
        initial_balance_short=1000,
        grid_range_pct=10.0,
        grid_step_pct=1.0,
        max_drawdown_pct=20.0,  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 20%
        debug=False
    )
    
    print("–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è DD:")
    print(f"  Long —Å–¥–µ–ª–æ–∫: {stats_long1['trades_count']}, PnL: {stats_long1['total_pnl']:.2f}")
    print(f"  Short —Å–¥–µ–ª–æ–∫: {stats_short1['trades_count']}, PnL: {stats_short1['total_pnl']:.2f}")
    print(f"  DD —Å—Ç–æ–ø —Å—Ä–∞–±–æ—Ç–∞–ª: {stats_long1.get('drawdown_stop_triggered', False)}")
    
    print("–° –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º DD 20%:")
    print(f"  Long —Å–¥–µ–ª–æ–∫: {stats_long2['trades_count']}, PnL: {stats_long2['total_pnl']:.2f}")
    print(f"  Short —Å–¥–µ–ª–æ–∫: {stats_short2['trades_count']}, PnL: {stats_short2['total_pnl']:.2f}")
    print(f"  DD —Å—Ç–æ–ø —Å—Ä–∞–±–æ—Ç–∞–ª: {stats_long2.get('drawdown_stop_triggered', False)}")
    print(f"  –ú–∞–∫—Å. DD –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {stats_long2.get('max_drawdown_reached', 0):.2f}%")
    
    return stats_long1, stats_long2

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Draw Down –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫")
    print("=" * 70)
    
    try:
        # –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫
        metrics = test_advanced_metrics()
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è drawdown
        stats1, stats2 = test_drawdown_control()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
