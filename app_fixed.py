"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit.
"""

import os
import time
import json
from datetime import datetime
from typing import List, Dict, Any, Tuple

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from binance.client import Client

from modules.collector import BinanceDataCollector
from modules.processor import DataProcessor
from modules.correlation import CorrelationAnalyzer
from modules.portfolio import PortfolioBuilder
from modules.grid_analyzer import GridAnalyzer
from modules.optimizer import GridOptimizer

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–º–∏—Å—Å–∏–π Binance
MAKER_COMMISSION_RATE = 0.0002  # 0.02%
TAKER_COMMISSION_RATE = 0.0005  # 0.05%


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π
def save_api_keys(api_key: str, api_secret: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª config.json"""
    config = {
        "api_key": api_key,
        "api_secret": api_secret
    }
    with open("config.json", "w") as f:
        json.dump(config, f)
    print("API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config.json")

def load_api_keys() -> Tuple[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ config.json –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Streamlit secrets (–¥–ª—è Streamlit Cloud)
        if hasattr(st, 'secrets') and 'binance' in st.secrets:
            return st.secrets["binance"]["api_key"], st.secrets["binance"]["api_secret"]
        
        # –ó–∞—Ç–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Heroku, Railway, Render)
        env_api_key = os.getenv("BINANCE_API_KEY")
        env_api_secret = os.getenv("BINANCE_API_SECRET")
        if env_api_key and env_api_secret:
            return env_api_key, env_api_secret
        
        # –ù–∞–∫–æ–Ω–µ—Ü –∏–∑ —Ñ–∞–π–ª–∞ config.json (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
        if os.path.exists("config.json"):
            with open("config.json", "r") as f:
                config = json.load(f)
            return config.get("api_key", ""), config.get("api_secret", "")
        return "", ""
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ API –∫–ª—é—á–µ–π: {e}")
        return "", ""


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance",
    page_icon="üìä",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'api_keys_saved' not in st.session_state:
    st.session_state.api_keys_saved = False

if 'saved_pairs' not in st.session_state:
    st.session_state.saved_pairs = []

if 'filtered_pairs' not in st.session_state:
    st.session_state.filtered_pairs = []

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
    saved_api_key, saved_api_secret = load_api_keys()
    
    api_key = st.text_input(
        "API Key", 
        value=saved_api_key,
        type="password", 
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç Binance"
    )
    api_secret = st.text_input(
        "API Secret", 
        value=saved_api_secret,
        type="password", 
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç Binance"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏"):
        if api_key and api_secret:
            try:
                save_api_keys(api_key, api_secret)
                st.session_state.api_keys_saved = True
                st.success("API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                time.sleep(1)
                st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: {e}")
        else:
            st.error("–í–≤–µ–¥–∏—Ç–µ –æ–±–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
    if st.session_state.api_keys_saved or (api_key and api_secret):
        st.success("‚úÖ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    elif not api_key and not api_secret:
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Binance")
    else:
        st.info("üí° –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏' –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞")
    
    st.markdown("---")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    min_volume = st.number_input(
        "–ú–∏–Ω. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (USDT)", 
        min_value=1000000, 
        max_value=1000000000, 
        value=10000000,
        step=1000000,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞"
    )
    
    min_price = st.number_input(
        "–ú–∏–Ω. —Ü–µ–Ω–∞ (USDT)", 
        min_value=0.0001, 
        max_value=100.0, 
        value=0.01,
        step=0.01,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
    )
    
    max_price = st.number_input(
        "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (USDT)", 
        min_value=1.0, 
        max_value=10000.0, 
        value=100.0,
        step=10.0,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
    )
    
    max_pairs = st.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
        min_value=5, 
        max_value=100, 
        value=30,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
    )

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
start_analysis = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
log_container = st.container()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Grid Trading
saved_api_key, saved_api_secret = load_api_keys()

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
    "üîç –§–∏–ª—å—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", 
    "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "üìà –ì—Ä–∞—Ñ–∏–∫–∏",
    "‚ö° Grid Trading",
    "ü§ñ –ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
])

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–æ–∫ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã)
st.markdown("""
<style>
/* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ */
.stTabs [data-baseweb="tab-list"] button [data-testid="stMarkdownContainer"] p {
    font-size: 14px;
    font-weight: bold;
    margin: 0;
}

.stTabs [data-baseweb="tab-list"] {
    gap: 2px;
}

.stTabs [data-baseweb="tab-list"] button {
    height: 50px;
    white-space: pre-wrap;
    border-radius: 4px 4px 0px 0px;
    gap: 4px;
    padding: 10px 15px;
    border: 1px solid transparent;
    transition: all 0.2s ease;
}

/* –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ */
@media (prefers-color-scheme: light) {
    .stTabs [data-baseweb="tab-list"] button {
        background-color: #f0f2f6;
        color: #262730;
        border-color: #d0d0d0;
    }
    
    .stTabs [data-baseweb="tab-list"] button:hover {
        background-color: #e8eaf0;
        border-color: #bbb;
    }
    
    .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] {
        background-color: #ff4b4b;
        color: white;
        border-color: #ff4b4b;
    }
}

/* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ */
@media (prefers-color-scheme: dark) {
    .stTabs [data-baseweb="tab-list"] button {
        background-color: #2b2b2b;
        color: #fafafa;
        border-color: #4a4a4a;
    }
    
    .stTabs [data-baseweb="tab-list"] button:hover {
        background-color: #3a3a3a;
        border-color: #666;
    }
    
    .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] {
        background-color: #ff4b4b;
        color: white;
        border-color: #ff4b4b;
    }
}

/* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã Streamlit */
[data-theme="dark"] .stTabs [data-baseweb="tab-list"] button {
    background-color: #2b2b2b !important;
    color: #fafafa !important;
    border-color: #4a4a4a !important;
}

[data-theme="dark"] .stTabs [data-baseweb="tab-list"] button:hover {
    background-color: #3a3a3a !important;
    border-color: #666 !important;
}

[data-theme="dark"] .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] {
    background-color: #ff4b4b !important;
    color: white !important;
    border-color: #ff4b4b !important;
}

/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
.stApp[data-theme="dark"] .stTabs [data-baseweb="tab-list"] button {
    background-color: #2b2b2b !important;
    color: #fafafa !important;
    border-color: #4a4a4a !important;
}

.stApp[data-theme="dark"] .stTabs [data-baseweb="tab-list"] button:hover {
    background-color: #3a3a3a !important;
    border-color: #666 !important;
}

.stApp[data-theme="dark"] .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] {
    background-color: #ff4b4b !important;
    color: white !important;
    border-color: #ff4b4b !important;
}
</style>
""", unsafe_allow_html=True)

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
popular_pairs = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "XRPUSDT",
    "LINKUSDT", "DOTUSDT", "LTCUSDT", "UNIUSDT", "SOLUSDT",
    "MATICUSDT", "ICXUSDT", "VETUSDT", "XLMUSDT", "TRXUSDT",
    "ATOMUSDT", "AVAXUSDT", "NEARUSDT", "AAVEUSDT", "ALGOUSDT",
    "MANAUSDT", "SANDUSDT", "CHZUSDT", "FTMUSDT", "HBARUSDT",
    "THETAUSDT", "IOTAUSDT", "EOSUSDT", "DYDXUSDT", "ZILUSDT"
]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –ø–∞—Ä
def save_pairs_list(pairs_list: List[str], filename: str = "saved_pairs.json") -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤ —Ñ–∞–π–ª"""
    try:
        with open(filename, "w") as f:
            json.dump(pairs_list, f)
        st.success(f"–°–ø–∏—Å–æ–∫ –∏–∑ {len(pairs_list)} –ø–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

def load_pairs_list(filename: str = "saved_pairs.json") -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(filename):
            with open(filename, "r") as f:
                pairs = json.load(f)
            return pairs
        else:
            return popular_pairs
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return popular_pairs

# –í–∫–ª–∞–¥–∫–∞ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä –ø–∞—Ä
with tab1:
    st.header("üíº –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    st.subheader("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    col_status1, col_status2, col_status3 = st.columns(3)
    
    with col_status1:
        if api_key and api_secret:
            st.success("üîë API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            st.error("üîë API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    with col_status2:
        pairs_count = len(st.session_state.saved_pairs) if st.session_state.saved_pairs else 0
        if pairs_count > 0:
            st.success(f"üìã {pairs_count} –ø–∞—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        else:
            st.warning("üìã –°–ø–∏—Å–æ–∫ –ø–∞—Ä –ø—É—Å—Ç–æ–π")
    
    with col_status3:
        if st.session_state.api_keys_saved:
            st.success("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            st.info("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    st.markdown("---")
    
    # –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä
    st.subheader("üîç –§–∏–ª—å—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.write("**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä:**")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if not st.session_state.saved_pairs:
            st.session_state.saved_pairs = load_pairs_list()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        pairs_text = "\n".join(st.session_state.saved_pairs)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
        edited_pairs_text = st.text_area(
            "–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É):",
            value=pairs_text,
            height=200,
            help="–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É. –ù–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT"
        )
        
    with col2:
        st.write("**–î–µ–π—Å—Ç–≤–∏—è:**")
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", use_container_width=True):
            new_pairs = [pair.strip().upper() for pair in edited_pairs_text.split('\n') if pair.strip()]
            if new_pairs:
                st.session_state.saved_pairs = new_pairs
                save_pairs_list(new_pairs)
                time.sleep(1)
                st.rerun()
            else:
                st.error("–°–ø–∏—Å–æ–∫ –ø–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", use_container_width=True):
            loaded_pairs = load_pairs_list()
            if loaded_pairs:
                st.session_state.saved_pairs = loaded_pairs
                st.success("–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞!")
                time.sleep(1)
                st.rerun()
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞")
        
        if st.button("üîß –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—é", use_container_width=True):
            st.session_state.saved_pairs = popular_pairs.copy()
            st.success("–°–ø–∏—Å–æ–∫ —Å–±—Ä–æ—à–µ–Ω –∫ —É–º–æ–ª—á–∞–Ω–∏—é!")
            time.sleep(1)
            st.rerun()
        
        st.info(f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: {len(st.session_state.saved_pairs)} –ø–∞—Ä")
    
    st.markdown("---")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–ª–∑—É–Ω–∫–∞–º–∏
    st.subheader("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    col_a, col_b = st.columns(2)
    
    with col_a:
        min_volume_slider = st.slider(
            "–ú–∏–Ω. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (–º–ª–Ω USDT)", 
            min_value=1, 
            max_value=1000, 
            value=10,
            step=1,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏–æ–Ω–∞—Ö USDT"
        )
        min_volume_calc = min_volume_slider * 1000000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDT
        
        min_price_slider = st.slider(
            "–ú–∏–Ω. —Ü–µ–Ω–∞ (USDT)", 
            min_value=0.0001, 
            max_value=10.0, 
            value=0.01,
            step=0.0001,
            format="%.4f",
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
        )
        
    with col_b:
        max_price_slider = st.slider(
            "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (USDT)", 
            min_value=1.0, 
            max_value=10000.0, 
            value=100.0,
            step=1.0,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
        )
        
        max_pairs_slider = st.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
            min_value=5, 
            max_value=100, 
            value=30,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    st.markdown("---")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    st.subheader("üìã –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    col_info1, col_info2 = st.columns(2)
    
    with col_info1:
        st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º", f"${min_volume_calc:,}")
        st.metric("–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", f"${min_price_slider:.4f} - ${max_price_slider:.2f}")
    
    with col_info2:
        st.metric("–ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä", max_pairs_slider)
        st.metric("–ü–∞—Ä –≤ —Å–ø–∏—Å–∫–µ", len(st.session_state.saved_pairs))

# –í–∫–ª–∞–¥–∫–∞ 2: –§–∏–ª—å—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
with tab2:
    st.header("üîç –§–∏–ª—å—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
    
    if start_analysis:
        st.subheader("üîÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...")
        st.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –∑–¥–µ—Å—å")
        
    else:
        st.subheader("üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
        current_pairs = st.session_state.saved_pairs if st.session_state.saved_pairs else popular_pairs
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø–∞—Ä
        display_pairs = current_pairs[:max_pairs]
        
        pairs_df = pd.DataFrame({
            '–°–∏–º–≤–æ–ª': display_pairs,
            '–û–ø–∏—Å–∞–Ω–∏–µ': [f"–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {pair}" for pair in display_pairs],
            '–°—Ç–∞—Ç—É—Å': ['‚úÖ –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É'] * len(display_pairs)
        })
        
        st.dataframe(pairs_df, use_container_width=True)
        st.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ {len(display_pairs)} –∏–∑ {len(current_pairs)} –ø–∞—Ä –≤ —Å–ø–∏—Å–∫–µ")
        
        if len(current_pairs) > max_pairs:
            st.warning(f"–í —Å–ø–∏—Å–∫–µ {len(current_pairs)} –ø–∞—Ä, –Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–∞–Ω–æ —Ç–æ–ª—å–∫–æ {max_pairs}. –£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä.")

# –í–∫–ª–∞–¥–∫–∞ 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
with tab3:
    st.header("üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    
    st.subheader("üìà –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ Binance")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Maker –∫–æ–º–∏—Å—Å–∏—è", f"{MAKER_COMMISSION_RATE*100:.3f}%", help="–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
    with col2:
        st.metric("Taker –∫–æ–º–∏—Å—Å–∏—è", f"{TAKER_COMMISSION_RATE*100:.3f}%", help="–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
    
    st.markdown("---")
    
    st.subheader("üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    features = [
        ("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É –∏ —Ü–µ–Ω–µ"),
        ("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è Grid Trading", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏"),
        ("‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 15m, 1h, 4h, 1d –¥–∞–Ω–Ω—ã—Ö"),
        ("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞", "–†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"),
        ("‚úÖ –ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"),
        ("‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –ø–∞—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    ]
    
    for emoji_title, description in features:
        with st.container():
            st.write(f"**{emoji_title}**")
            st.write(f"   {description}")
    
    st.markdown("---")
    
    st.subheader("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    with st.expander("–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"):
        st.write("""
        1. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏** –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ (–ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ Binance)
        2. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –≤ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        3. **–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ç–æ–π –∂–µ –≤–∫–ª–∞–¥–∫–µ
        4. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑** –∫–Ω–æ–ø–∫–æ–π –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        5. **–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã** –≤–æ –≤–∫–ª–∞–¥–∫–µ "–§–∏–ª—å—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"
        6. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ Grid Trading** –≤–æ –≤–∫–ª–∞–¥–∫–µ "Grid Trading"
        7. **–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
        """)
    
    with st.expander("–û Grid Trading"):
        st.write("""
        Grid Trading (—Å–µ—Ç–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è) - —ç—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É 
        —á–µ—Ä–µ–∑ —Ä–∞–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ü–µ–Ω—ã –≤–æ–∫—Ä—É–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã, —Å–æ–∑–¥–∞–≤–∞—è "—Å–µ—Ç–∫—É" –æ—Ä–¥–µ—Ä–æ–≤.
        
        **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
        - –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω–æ–π –≤ –±–æ–∫–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö
        - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é
        - –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        
        **–†–∏—Å–∫–∏:**
        - –ú–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —É–±—ã—Ç–∫–∞–º –≤ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö
        - –¢—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
        - –ö–æ–º–∏—Å—Å–∏–∏ –º–æ–≥—É—Ç —Å—ä–µ–¥–∞—Ç—å –ø—Ä–∏–±—ã–ª—å
        """)

# –í–∫–ª–∞–¥–∫–∞ 4: –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω
with tab4:
    st.header("üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")
    
    current_pairs_for_chart = st.session_state.saved_pairs if st.session_state.saved_pairs else popular_pairs
    selected_symbol = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", 
        current_pairs_for_chart, 
        key="chart_symbol",
        help=f"–î–æ—Å—Ç—É–ø–Ω–æ {len(current_pairs_for_chart)} –ø–∞—Ä –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
    )
    
    if selected_symbol and api_key and api_secret:
        try:
            with st.spinner(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {selected_symbol}..."):
                collector = BinanceDataCollector(api_key, api_secret)
                df = collector.get_historical_data(selected_symbol, "1d", 90)
            
            if not df.empty:
                # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
                fig, ax = plt.subplots(figsize=(12, 6))
                ax.plot(df.index, df['close'], linewidth=2, color='#ff4b4b')
                ax.set_title(f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã {selected_symbol} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π", fontsize=16, fontweight='bold')
                ax.set_xlabel("–î–∞—Ç–∞")
                ax.set_ylabel("–¶–µ–Ω–∞ (USDT)")
                ax.grid(True, alpha=0.3)
                st.pyplot(fig)
                
                # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {selected_symbol}")
                
                col_chart1, col_chart2, col_chart3, col_chart4 = st.columns(4)
                
                with col_chart1:
                    st.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${df['close'].iloc[-1]:.6f}")
                with col_chart2:
                    st.metric("–ú–∞–∫—Å–∏–º—É–º", f"${df['high'].max():.6f}")
                with col_chart3:
                    st.metric("–ú–∏–Ω–∏–º—É–º", f"${df['low'].min():.6f}")
                with col_chart4:
                    price_change = ((df['close'].iloc[-1] / df['close'].iloc[0]) - 1) * 100
                    st.metric("–ò–∑–º–µ–Ω–µ–Ω–∏–µ", f"{price_change:.2f}%")
                    
            else:
                st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    elif not api_key or not api_secret:
        st.warning("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")

# –í–∫–ª–∞–¥–∫–∞ 5: Grid Trading (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
with tab5:
    st.header("‚ö° –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–µ—Ç–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    st.subheader("üéõÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        grid_range_pct = st.slider(
            "–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏ (%)", 
            min_value=5.0, 
            max_value=50.0, 
            value=20.0,
            step=1.0,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–µ—Ç–∫–∏"
        )
    
    with col2:
        grid_step_pct = st.slider(
            "–®–∞–≥ —Å–µ—Ç–∫–∏ (%)", 
            min_value=0.1, 
            max_value=5.0, 
            value=1.0,
            step=0.1,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —à–∞–≥ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ —Å–µ—Ç–∫–∏"
        )
        
    with col3:
        initial_balance = st.slider(
            "–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (USDT)",
            min_value=100,
            max_value=50000,
            value=1000,
            step=100,
            help="–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏"
        )

    st.markdown("---")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
    st.subheader("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    col_a, col_b, col_c = st.columns(3)
    with col_a:
        simulation_days = st.slider(
            "–°—Ä–æ–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ (–¥–Ω–∏)",
            min_value=7,
            max_value=365,
            value=90,
            step=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏"
        )
    with col_b:
        stop_loss_pct = st.slider(
            "–°—Ç–æ–ø-–ª–æ—Å—Å (%)",
            min_value=0.0,
            max_value=20.0,
            value=5.0,
            step=0.5,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç —É–±—ã—Ç–∫–∞ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π. 0 - –æ—Ç–∫–ª—é—á–∏—Ç—å."
        )
    with col_c:
        timeframe = st.selectbox(
            "–¢–∞–π–º—Ñ—Ä–µ–π–º",
            options=["15m", "1h", "4h", "1d"],
            index=1,
            help="–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
        )

    # –í—ã–±–æ—Ä –ø–∞—Ä—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    current_pairs_for_grid = st.session_state.saved_pairs if st.session_state.saved_pairs else popular_pairs
    selected_pair_for_grid = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏",
        current_pairs_for_grid,
        key="selected_pair_for_grid",
        help=f"–î–æ—Å—Ç—É–ø–Ω–æ {len(current_pairs_for_grid)} –ø–∞—Ä –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
    )

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã", type="primary"):
        if not saved_api_key or not saved_api_secret:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
        elif not selected_pair_for_grid:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏.")
        else:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                with st.spinner("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance..."):
                    collector = BinanceDataCollector(saved_api_key, saved_api_secret)
                    grid_analyzer = GridAnalyzer(collector)
                st.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                with st.spinner(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {selected_pair_for_grid}..."):
                    timeframe_in_minutes = {'15m': 15, '1h': 60, '4h': 240, '1d': 1440}
                    total_minutes = simulation_days * 24 * 60
                    limit = int(total_minutes / timeframe_in_minutes[timeframe])
                    
                    df_for_simulation = collector.get_historical_data(selected_pair_for_grid, timeframe, limit)
                
                if df_for_simulation.empty:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏.")
                else:
                    # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
                    with st.spinner(f"–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è {selected_pair_for_grid}..."):
                        stats_long, stats_short, log_long_df, log_short_df = grid_analyzer.estimate_dual_grid_by_candles_realistic(
                            df=df_for_simulation,
                            initial_balance_long=initial_balance,
                            initial_balance_short=initial_balance,
                            grid_range_pct=grid_range_pct,
                            grid_step_pct=grid_step_pct,
                            order_size_usd_long=0,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
                            order_size_usd_short=0, # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
                            commission_pct=TAKER_COMMISSION_RATE * 100,
                            stop_loss_pct=stop_loss_pct if stop_loss_pct > 0 else None,
                            debug=False
                        )

                    st.success(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è {selected_pair_for_grid} –∑–∞ {simulation_days} –¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
                    
                    # –†–∞—Å—á–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    total_pnl = stats_long['total_pnl'] + stats_short['total_pnl']
                    total_initial_balance = initial_balance * 2
                    total_pnl_pct = (total_pnl / total_initial_balance) * 100 if total_initial_balance > 0 else 0
                    total_trades = stats_long['trades_count'] + stats_short['trades_count']
                    total_commission = stats_long['total_commission'] + stats_short['total_commission']
                    
                    col_result1, col_result2, col_result3 = st.columns(3)
                    
                    with col_result1:
                        st.metric("–û–±—â–∏–π PnL", f"${total_pnl:.2f}", f"{total_pnl_pct:.2f}%")
                    with col_result2:
                        st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", total_trades)
                    with col_result3:
                        st.metric("–í—Å–µ–≥–æ –∫–æ–º–∏—Å—Å–∏–π", f"${total_commission:.2f}")

                    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                    
                    results_data = {
                        "–ú–µ—Ç—Ä–∏–∫–∞": ["–ë–∞–ª–∞–Ω—Å Long", "PnL Long ($)", "PnL Long (%)", "–°–¥–µ–ª–æ–∫ Long", "–ö–æ–º–∏—Å—Å–∏–∏ Long ($)",
                                    "–ë–∞–ª–∞–Ω—Å Short", "PnL Short ($)", "PnL Short (%)", "–°–¥–µ–ª–æ–∫ Short", "–ö–æ–º–∏—Å—Å–∏–∏ Short ($)"],
                        "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                            f"${stats_long['final_balance']:.2f}", f"${stats_long['total_pnl']:.2f}", f"{stats_long['total_pnl_pct']:.2f}%", str(stats_long['trades_count']), f"${stats_long['total_commission']:.2f}",
                            f"${stats_short['final_balance']:.2f}", f"${stats_short['total_pnl']:.2f}", f"{stats_short['total_pnl_pct']:.2f}%", str(stats_short['trades_count']), f"${stats_short['total_commission']:.2f}"
                        ]
                    }
                    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ Arrow
                    results_df = pd.DataFrame(results_data)
                    results_df['–ó–Ω–∞—á–µ–Ω–∏–µ'] = results_df['–ó–Ω–∞—á–µ–Ω–∏–µ'].astype(str)
                    st.dataframe(results_df, use_container_width=True)

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å–¥–µ–ª–æ–∫
                    with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–¥–µ–ª–æ–∫"):
                        st.subheader("–õ–æ–≥ —Å–¥–µ–ª–æ–∫ Long")
                        if log_long_df: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                            df_long = pd.DataFrame(log_long_df)
                            st.dataframe(df_long, use_container_width=True)
                        else:
                            st.info("–°–¥–µ–ª–æ–∫ –ø–æ Long –Ω–µ –±—ã–ª–æ.")
                            
                        st.subheader("–õ–æ–≥ —Å–¥–µ–ª–æ–∫ Short")
                        if log_short_df: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                            df_short = pd.DataFrame(log_short_df)
                            st.dataframe(df_short, use_container_width=True)
                        else:
                            st.info("–°–¥–µ–ª–æ–∫ –ø–æ Short –Ω–µ –±—ã–ª–æ.")

            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
                st.exception(e)

# –í–∫–ª–∞–¥–∫–∞ 6: –ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
with tab6:
    st.header("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    st.markdown("""
    **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
    - –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –Ω–∞ –±—ç–∫—Ç–µ—Å—Ç (70%) –∏ —Ñ–æ—Ä–≤–∞—Ä–¥ —Ç–µ—Å—Ç (30%)
    - –ê–ª–≥–æ—Ä–∏—Ç–º –∏—â–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ–±–µ–∏—Ö —á–∞—Å—Ç—è—Ö
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–µ—Ç–∫–µ
    - –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        current_pairs_for_opt = st.session_state.saved_pairs if st.session_state.saved_pairs else popular_pairs
        opt_pair = st.selectbox(
            "–ü–∞—Ä–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
            current_pairs_for_opt,
            key="opt_pair",
            help=f"–î–æ—Å—Ç—É–ø–Ω–æ {len(current_pairs_for_opt)} –ø–∞—Ä –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
        )
        
        opt_balance = st.slider(
            "–ë–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (USDT)",
            min_value=100,
            max_value=10000,
            value=1000,
            step=100,
            help="–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
        )
    
    with col2:
        opt_timeframe = st.selectbox(
            "–¢–∞–π–º—Ñ—Ä–µ–π–º",
            options=["15m", "1h", "4h", "1d"],
            index=1,
            key="opt_timeframe"
        )
        
        opt_days = st.slider(
            "–î–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏",
            min_value=30,
            max_value=365,
            value=180,
            help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö"
        )
    
    with col3:
        opt_method = st.selectbox(
            "–ú–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
            options=["–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫"],
            help="–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π - –ª—É—á—à–µ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π - –±—ã—Å—Ç—Ä–µ–µ"
        )
        
        max_workers = st.slider(
            "–ü–æ—Ç–æ–∫–æ–≤",
            min_value=1,
            max_value=8,
            value=4,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"
        )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
    st.subheader("üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    population_size = 50
    generations = 20
    iterations = 3
    points_per_iteration = 50
    
    if opt_method == "–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º":
        col_a, col_b = st.columns(2)
        with col_a:
            population_size = st.slider("–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏", 20, 100, 50)
        with col_b:
            generations = st.slider("–ü–æ–∫–æ–ª–µ–Ω–∏–π", 10, 50, 20)
    else:
        col_a, col_b = st.columns(2)
        with col_a:
            iterations = st.slider("–ò—Ç–µ—Ä–∞—Ü–∏–π", 2, 5, 3)
        with col_b:
            points_per_iteration = st.slider("–¢–æ—á–µ–∫ –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é", 20, 100, 50)
    
    st.markdown("---")
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é", type="primary", key="start_optimization"):
        if not saved_api_key or not saved_api_secret:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
        else:
            try:
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                status_text.text("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
                collector = BinanceDataCollector(saved_api_key, saved_api_secret)
                grid_analyzer = GridAnalyzer(collector)
                optimizer = GridOptimizer(grid_analyzer, TAKER_COMMISSION_RATE)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                status_text.text(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {opt_pair}...")
                progress_bar.progress(10)
                
                timeframe_in_minutes = {'15m': 15, '1h': 60, '4h': 240, '1d': 1440}
                total_minutes = opt_days * 24 * 60
                limit = int(total_minutes / timeframe_in_minutes[opt_timeframe])
                
                df_opt = collector.get_historical_data(opt_pair, opt_timeframe, limit)
                
                if df_opt.empty:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.")
                else:
                    progress_bar.progress(20)
                    
                    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    def progress_callback(message):
                        status_text.text(message)
                    
                    start_time = time.time()
                    
                    # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
                    if opt_method == "–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º":
                        status_text.text("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞...")
                        progress_bar.progress(30)
                        
                        results = optimizer.optimize_genetic(
                            df=df_opt,
                            initial_balance=opt_balance,
                            population_size=population_size,
                            generations=generations,
                            forward_test_pct=0.3,
                            max_workers=max_workers,
                            progress_callback=progress_callback
                        )
                    else:
                        status_text.text("–ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
                        progress_bar.progress(30)
                        
                        results = optimizer.grid_search_adaptive(
                            df=df_opt,
                            initial_balance=opt_balance,
                            forward_test_pct=0.3,
                            iterations=iterations,
                            points_per_iteration=points_per_iteration,
                            progress_callback=progress_callback
                        )
                    
                    end_time = time.time()
                    progress_bar.progress(100)
                    status_text.text(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.1f} —Å–µ–∫—É–Ω–¥")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!")
                    
                    # –¢–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.subheader("üèÜ –¢–æ–ø-10 –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                    
                    top_results = results[:10]
                    results_data = []
                    
                    for i, result in enumerate(top_results):
                        results_data.append({
                            '–†–∞–Ω–≥': i + 1,
                            '–û–±—â–∏–π —Å–∫–æ—Ä (%)': f"{result.combined_score:.2f}",
                            '–ë—ç–∫—Ç–µ—Å—Ç (%)': f"{result.backtest_score:.2f}",
                            '–§–æ—Ä–≤–∞—Ä–¥ (%)': f"{result.forward_score:.2f}",
                            '–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏ (%)': f"{result.params.grid_range_pct:.1f}",
                            '–®–∞–≥ —Å–µ—Ç–∫–∏ (%)': f"{result.params.grid_step_pct:.2f}",
                            '–°—Ç–æ–ø-–ª–æ—Å—Å (%)': f"{result.params.stop_loss_pct:.1f}",
                            '–°–¥–µ–ª–æ–∫': result.trades_count,
                            '–ü—Ä–æ—Å–∞–¥–∫–∞ (%)': f"{result.drawdown:.2f}"
                        })
                    
                    results_df = pd.DataFrame(results_data)
                    st.dataframe(results_df, use_container_width=True)
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—É—á—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                    if results:
                        best_result = results[0]
                        st.subheader("ü•á –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                        
                        col_info1, col_info2, col_info3 = st.columns(3)
                        
                        with col_info1:
                            st.metric("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä", f"{best_result.combined_score:.2f}%")
                            st.metric("–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏", f"{best_result.params.grid_range_pct:.1f}%")
                        
                        with col_info2:
                            st.metric("–ë—ç–∫—Ç–µ—Å—Ç vs –§–æ—Ä–≤–∞—Ä–¥", 
                                    f"{best_result.backtest_score:.2f}% vs {best_result.forward_score:.2f}%")
                            st.metric("–®–∞–≥ —Å–µ—Ç–∫–∏", f"{best_result.params.grid_step_pct:.2f}%")
                        
                        with col_info3:
                            st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", best_result.trades_count)
                            st.metric("–°—Ç–æ–ø-–ª–æ—Å—Å", f"{best_result.params.stop_loss_pct:.1f}%")
                        
                        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        stability = abs(best_result.backtest_score - best_result.forward_score)
                        if stability < 5:
                            st.success(f"üü¢ –í—ã—Å–æ–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (—Ä–∞–∑–Ω–æ—Å—Ç—å {stability:.2f}%)")
                        elif stability < 10:
                            st.warning(f"üü° –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (—Ä–∞–∑–Ω–æ—Å—Ç—å {stability:.2f}%)")
                        else:
                            st.error(f"üî¥ –ù–∏–∑–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (—Ä–∞–∑–Ω–æ—Å—Ç—å {stability:.2f}%)")
                        
                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                        st.subheader("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                        
                        if st.button("üî¨ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                            with st.spinner("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
                                test_stats_long, test_stats_short, test_log_long, test_log_short = grid_analyzer.estimate_dual_grid_by_candles_realistic(
                                    df=df_opt,
                                    initial_balance_long=opt_balance,
                                    initial_balance_short=opt_balance,
                                    grid_range_pct=best_result.params.grid_range_pct,
                                    grid_step_pct=best_result.params.grid_step_pct,
                                    order_size_usd_long=0,
                                    order_size_usd_short=0,
                                    commission_pct=TAKER_COMMISSION_RATE * 100,
                                    stop_loss_pct=best_result.params.stop_loss_pct if best_result.params.stop_loss_pct > 0 else None,
                                    debug=False
                                )
                                
                                total_pnl = test_stats_long['total_pnl'] + test_stats_short['total_pnl']
                                total_pnl_pct = (total_pnl / (opt_balance * 2)) * 100
                                
                                st.success("‚úÖ –¢–µ—Å—Ç –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
                                st.metric("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", f"{total_pnl_pct:.2f}%", f"${total_pnl:.2f}")
                                
                                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                                expected_avg = (best_result.backtest_score + best_result.forward_score) / 2
                                difference = total_pnl_pct - expected_avg
                                st.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ: {difference:.2f}%")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
                st.exception(e)

# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞)
if start_analysis:
    with log_container:
        if not api_key or not api_secret:
            st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")
        else:
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞
            progress_analysis = st.progress(0)
            status_analysis = st.empty()
            
            try:
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤
                status_analysis.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")
                progress_analysis.progress(10)
                
                collector = BinanceDataCollector(api_key, api_secret)
                processor = DataProcessor(collector)
                analyzer = CorrelationAnalyzer(collector) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º collector
                portfolio_builder = PortfolioBuilder(collector, analyzer) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º collector –∏ analyzer
                
                progress_analysis.progress(30)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä
                status_analysis.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
                all_pairs = collector.get_all_usdt_pairs()
                filtered_pairs = processor.filter_pairs_by_volume_and_price(
                    all_pairs, 
                    min_volume=min_volume, 
                    min_price=min_price, 
                    max_price=max_price
                )
                
                progress_analysis.progress(70)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                pairs_to_analyze = filtered_pairs[:max_pairs]
                
                progress_analysis.progress(90)
                status_analysis.success(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {len(pairs_to_analyze)} –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ session_state
                st.session_state.filtered_pairs = pairs_to_analyze
                
                progress_analysis.progress(100)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É 2 —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
                st.success("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–§–∏–ª—å—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.subheader("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                
                col_res1, col_res2, col_res3 = st.columns(3)
                with col_res1:
                    st.metric("–í—Å–µ–≥–æ –ø–∞—Ä USDT", len(all_pairs))
                with col_res2:
                    st.metric("–ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä", len(filtered_pairs))
                with col_res3:
                    st.metric("–í—ã–±—Ä–∞–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", len(pairs_to_analyze))
                
                pairs_df = pd.DataFrame({
                    '–°–∏–º–≤–æ–ª': pairs_to_analyze,
                    '–û–ø–∏—Å–∞–Ω–∏–µ': [f"–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {p}" for p in pairs_to_analyze],
                    '–°—Ç–∞—Ç—É—Å': ['‚úÖ –ì–æ—Ç–æ–≤ –∫ Grid Trading'] * len(pairs_to_analyze)
                })
                st.dataframe(pairs_df, use_container_width=True)
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π"):
                    st.session_state.saved_pairs = pairs_to_analyze
                    save_pairs_list(pairs_to_analyze)
                    st.success("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π!")
                
            except Exception as e:
                status_analysis.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                st.exception(e) # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
