#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —à–∞–≥–æ–≤ —Å–µ—Ç–∫–∏ 0.3% vs 0.8% –Ω–∞ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ICXUSDT.
"""

import pandas as pd
import numpy as np
from modules.grid_analyzer import GridAnalyzer
from modules.collector import BinanceDataCollector
from binance.client import Client

def compare_grid_steps():
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —à–∞–≥–∞–º–∏ —Å–µ—Ç–∫–∏ –Ω–∞ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    print("–°–†–ê–í–ù–ï–ù–ò–ï –®–ê–ì–û–í –°–ï–¢–ö–ò: 0.3% vs 0.8% –ù–ê –ß–ê–°–û–í–´–• –î–ê–ù–ù–´–•")
    print("="*80)
    
    try:
        collector = BinanceDataCollector(api_key="dummy", api_secret="dummy")
        analyzer = GridAnalyzer(collector)
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ICXUSDT –∑–∞ 7 –¥–Ω–µ–π...")
        df_hourly = collector.get_historical_data("ICXUSDT", Client.KLINE_INTERVAL_1HOUR, 168)
        
        if df_hourly.empty:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
            
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df_hourly)} —á–∞—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        print(f"–ü–µ—Ä–∏–æ–¥: {df_hourly.index[0].strftime('%Y-%m-%d %H:%M')} - {df_hourly.index[-1].strftime('%Y-%m-%d %H:%M')}")
        print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {((df_hourly.iloc[-1]['close'] / df_hourly.iloc[0]['close']) - 1) * 100:.2f}%")
        
        hourly_ranges = (df_hourly['high'] - df_hourly['low']) / df_hourly['low'] * 100
        avg_hourly_range = hourly_ranges.mean()
        print(f"–°—Ä–µ–¥–Ω–∏–π —á–∞—Å–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {avg_hourly_range:.3f}%")
        print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        grid_ranges = [3, 5, 8]
        stop_losses = [2, 5]
        grid_steps = [0.3, 0.8]  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–≤–∞ —à–∞–≥–∞
        
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –° –†–ê–ó–ù–´–ú–ò –®–ê–ì–ê–ú–ò –°–ï–¢–ö–ò:")
        print("="*130)
        print(f"{'–î–∏–∞–ø–∞–∑–æ–Ω':>8} | {'–®–∞–≥':>6} | {'–°—Ç–æ–ø-–ª–æ—Å—Å':>10} | {'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':>15} | {'–°–∏–º—É–ª. PnL':>12} | {'Long PnL':>10} | {'Short PnL':>11} | {'–ú–æ–ª–Ω–∏–∏':>8} | {'–°—Ç–æ–ø-–ª–æ—Å—Å—ã':>10}")
        print("-" * 130)
        
        results = []
        
        for grid_range in grid_ranges:
            for grid_step in grid_steps:
                for stop_loss in stop_losses:
                    for close_both in [False, True]:
                        strategy_name = "–ó–∞–∫—Ä—ã—Ç—å –æ–±–µ" if close_both else "–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ"
                        
                        # –°–∏–º—É–ª—è—Ü–∏—è
                        result = analyzer.estimate_dual_grid_by_candles(
                            df_hourly,
                            grid_range_pct=grid_range,
                            grid_step_pct=grid_step,
                            commission_pct=0.1,
                            stop_loss_pct=stop_loss,
                            stop_loss_coverage=0.5,
                            close_both_on_stop_loss=close_both
                        )
                        
                        results.append({
                            'grid_range': grid_range,
                            'grid_step': grid_step,
                            'stop_loss': stop_loss,
                            'strategy': strategy_name,
                            'simulation_pnl': result['combined_pct'],
                            'long_pnl': result['long_pct'],
                            'short_pnl': result['short_pct'],
                            'lightning_breaks': result['lightning_breaks'],
                            'total_stop_losses': result['long_stop_losses'] + result['short_stop_losses']
                        })
                        
                        print(f"{grid_range:>8.0f} | {grid_step:>6.1f} | {stop_loss:>10.0f} | {strategy_name:>15} | "
                              f"{result['combined_pct']:>12.2f} | {result['long_pct']:>10.2f} | "
                              f"{result['short_pct']:>11.2f} | {result['lightning_breaks']:>8d} | "
                              f"{result['long_stop_losses'] + result['short_stop_losses']:>10d}")
        
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —à–∞–≥–∞–º
        print("–ê–ù–ê–õ–ò–ó –ü–û –®–ê–ì–ê–ú –°–ï–¢–ö–ò:")
        print("="*80)
        
        for grid_step in grid_steps:
            step_results = [r for r in results if r['grid_step'] == grid_step]
            best_result = max(step_results, key=lambda x: x['simulation_pnl'])
            avg_result = sum(r['simulation_pnl'] for r in step_results) / len(step_results)
            profitable_count = len([r for r in step_results if r['simulation_pnl'] > 0])
            
            print(f"–®–∞–≥ {grid_step}%:")
            print(f"  –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_result['simulation_pnl']:.2f}% "
                  f"(–¥–∏–∞–ø–∞–∑–æ–Ω {best_result['grid_range']}%, —Å—Ç–æ–ø-–ª–æ—Å—Å {best_result['stop_loss']}%, {best_result['strategy']})")
            print(f"  –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {avg_result:.2f}%")
            print(f"  –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {profitable_count}/{len(step_results)}")
            
            # –ú–µ—Å—è—á–Ω–∞—è —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            monthly_profit = best_result['simulation_pnl'] * 4.3
            print(f"  –ü—Ä–æ–≥–Ω–æ–∑ –º–µ—Å—è—á–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {monthly_profit:.1f}%")
            print()
        
        # –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print("–ü–†–Ø–ú–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –û–î–ò–ù–ê–ö–û–í–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í:")
        print("="*80)
        
        # –°—Ä–∞–≤–Ω–∏–º –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —à–∞–≥–∞–º–∏
        test_combinations = [
            (5, 2, "–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ"),
            (5, 2, "–ó–∞–∫—Ä—ã—Ç—å –æ–±–µ"),
            (8, 2, "–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ"),
            (3, 5, "–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ")
        ]
        
        for grid_range, stop_loss, strategy in test_combinations:
            result_03 = next((r for r in results if r['grid_range'] == grid_range and 
                             r['stop_loss'] == stop_loss and r['strategy'] == strategy and 
                             r['grid_step'] == 0.3), None)
            result_08 = next((r for r in results if r['grid_range'] == grid_range and 
                             r['stop_loss'] == stop_loss and r['strategy'] == strategy and 
                             r['grid_step'] == 0.8), None)
            
            if result_03 and result_08:
                difference = result_08['simulation_pnl'] - result_03['simulation_pnl']
                print(f"–î–∏–∞–ø–∞–∑–æ–Ω {grid_range}%, —Å—Ç–æ–ø-–ª–æ—Å—Å {stop_loss}%, {strategy}:")
                print(f"  –®–∞–≥ 0.3%: {result_03['simulation_pnl']:6.2f}%")
                print(f"  –®–∞–≥ 0.8%: {result_08['simulation_pnl']:6.2f}%")
                print(f"  –†–∞–∑–Ω–∏—Ü–∞:   {difference:6.2f}% ({'üëç' if difference > 0 else 'üëé' if difference < -1 else 'ü§∑'})")
                print()
        
        # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã
        print("–û–ë–©–ò–ï –í–´–í–û–î–´:")
        print("="*80)
        
        step_03_results = [r for r in results if r['grid_step'] == 0.3]
        step_08_results = [r for r in results if r['grid_step'] == 0.8]
        
        best_03 = max(step_03_results, key=lambda x: x['simulation_pnl'])
        best_08 = max(step_08_results, key=lambda x: x['simulation_pnl'])
        
        avg_03 = sum(r['simulation_pnl'] for r in step_03_results) / len(step_03_results)
        avg_08 = sum(r['simulation_pnl'] for r in step_08_results) / len(step_08_results)
        
        print(f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —à–∞–≥–æ–º 0.3%: {best_03['simulation_pnl']:.2f}%")
        print(f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —à–∞–≥–æ–º 0.8%: {best_08['simulation_pnl']:.2f}%")
        print(f"–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —à–∞–≥–∞ {0.3 if best_03['simulation_pnl'] > best_08['simulation_pnl'] else 0.8}%: "
              f"{abs(best_03['simulation_pnl'] - best_08['simulation_pnl']):.2f}%")
        print()
        
        print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —à–∞–≥–æ–º 0.3%: {avg_03:.2f}%")
        print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —à–∞–≥–æ–º 0.8%: {avg_08:.2f}%")
        print(f"–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É: {abs(avg_03 - avg_08):.2f}% –≤ –ø–æ–ª—å–∑—É —à–∞–≥–∞ {0.3 if avg_03 > avg_08 else 0.8}%")
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if best_03['simulation_pnl'] > best_08['simulation_pnl']:
            print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –®–∞–≥ 0.3% –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            print(f"   –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –¥–∏–∞–ø–∞–∑–æ–Ω {best_03['grid_range']}%, —Å—Ç–æ–ø-–ª–æ—Å—Å {best_03['stop_loss']}%, {best_03['strategy']}")
        else:
            print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –®–∞–≥ 0.8% –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            print(f"   –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –¥–∏–∞–ø–∞–∑–æ–Ω {best_08['grid_range']}%, —Å—Ç–æ–ø-–ª–æ—Å—Å {best_08['stop_loss']}%, {best_08['strategy']}")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –º–æ–ª–Ω–∏–∏
        avg_lightning_03 = sum(r['lightning_breaks'] for r in step_03_results) / len(step_03_results)
        avg_lightning_08 = sum(r['lightning_breaks'] for r in step_08_results) / len(step_08_results)
        
        print(f"\n–í–ª–∏—è–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –º–æ–ª–Ω–∏–π:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–ª–Ω–∏–π (—à–∞–≥ 0.3%): {avg_lightning_03:.1f}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–ª–Ω–∏–π (—à–∞–≥ 0.8%): {avg_lightning_08:.1f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    compare_grid_steps()
