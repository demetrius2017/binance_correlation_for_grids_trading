"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit.
"""

import os
import time
import json
from datetime import datetime
from typing import List, Dict, Any, Tuple

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from binance.client import Client

from modules.collector import BinanceDataCollector
from modules.processor import DataProcessor
from modules.correlation import CorrelationAnalyzer
from modules.portfolio import PortfolioBuilder
from modules.grid_analyzer import GridAnalyzer, MAKER_COMMISSION_RATE, TAKER_COMMISSION_RATE


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π
def save_api_keys(api_key: str, api_secret: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª config.json"""
    config = {
        "api_key": api_key,
        "api_secret": api_secret
    }
    with open("config.json", "w") as f:
        json.dump(config, f)
    print("API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config.json")

def load_api_keys() -> Tuple[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ config.json"""
    try:
        if os.path.exists("config.json"):
            with open("config.json", "r") as f:
                config = json.load(f)
            return config.get("api_key", ""), config.get("api_secret", "")
        return "", ""
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ API –∫–ª—é—á–µ–π: {e}")
        return "", ""


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance",
    page_icon="üìä",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
    saved_api_key, saved_api_secret = load_api_keys()
    
    api_key = st.text_input(
        "API Key", 
        value=saved_api_key,
        type="password", 
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç Binance"
    )
    api_secret = st.text_input(
        "API Secret", 
        value=saved_api_secret,
        type="password", 
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç Binance"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏"):
        if api_key and api_secret:
            save_api_keys(api_key, api_secret)
            st.success("API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            st.error("–í–≤–µ–¥–∏—Ç–µ –æ–±–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    st.markdown("---")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    min_volume = st.number_input(
        "–ú–∏–Ω. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (USDT)", 
        min_value=1000000, 
        max_value=1000000000, 
        value=10000000,
        step=1000000,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞"
    )
    
    min_price = st.number_input(
        "–ú–∏–Ω. —Ü–µ–Ω–∞ (USDT)", 
        min_value=0.0001, 
        max_value=100.0, 
        value=0.01,
        step=0.01,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
    )
    
    max_price = st.number_input(
        "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (USDT)", 
        min_value=1.0, 
        max_value=10000.0, 
        value=100.0,
        step=10.0,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
    )
    
    max_pairs = st.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
        min_value=5, 
        max_value=100, 
        value=30,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–µ—Ç–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Grid Trading")
    
    grid_range_pct = st.slider(
        "–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏ (%)", 
        min_value=5.0, 
        max_value=50.0, 
        value=20.0,
        step=1.0,
        help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–µ—Ç–∫–∏"
    )
    
    grid_step_pct = st.slider(
        "–®–∞–≥ —Å–µ—Ç–∫–∏ (%)", 
        min_value=0.1, 
        max_value=5.0, 
        value=1.0,
        step=0.1,
        help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —à–∞–≥ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ —Å–µ—Ç–∫–∏"
    )

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
start_analysis = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
log_container = st.container()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Grid Trading
saved_api_key, saved_api_secret = load_api_keys()

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìä –°–ø–∏—Å–æ–∫ –ø–∞—Ä", 
    "üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
    "üíº –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
    "üìà –ì—Ä–∞—Ñ–∏–∫–∏",
    "‚ö° Grid Trading"
])

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
popular_pairs = [
    "BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "XRPUSDT",
    "LINKUSDT", "DOTUSDT", "LTCUSDT", "UNIUSDT", "SOLUSDT",
    "MATICUSDT", "ICXUSDT", "VETUSDT", "XLMUSDT", "TRXUSDT"
]

# –í–∫–ª–∞–¥–∫–∞ 1: –°–ø–∏—Å–æ–∫ –ø–∞—Ä
with tab1:
    st.header("–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
    
    if start_analysis:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
        
    st.subheader("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    pairs_df = pd.DataFrame({
        '–°–∏–º–≤–æ–ª': popular_pairs[:max_pairs],
        '–û–ø–∏—Å–∞–Ω–∏–µ': [f"–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ {pair}" for pair in popular_pairs[:max_pairs]]
    })
    
    st.dataframe(pairs_df, use_container_width=True)
    st.success(f"–í—Å–µ–≥–æ –ø–∞—Ä: {len(popular_pairs[:max_pairs])}")

# –í–∫–ª–∞–¥–∫–∞ 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
with tab2:
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    
    st.subheader("–†–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ Binance")
    st.write(f"**Maker:** {MAKER_COMMISSION_RATE*100:.3f}%")
    st.write(f"**Taker:** {TAKER_COMMISSION_RATE*100:.3f}%")
    
    st.subheader("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
    st.write("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
    st.write("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è Grid Trading —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏") 
    st.write("‚úÖ –ß–∞—Å–æ–≤—ã–µ –∏ –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.write("‚úÖ –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞")

# –í–∫–ª–∞–¥–∫–∞ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∏
with tab3:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    st.subheader("–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    st.write(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: ${min_volume:,}")
    st.write(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ${min_price:.4f} - ${max_price:.2f}")
    st.write(f"–ú–∞–∫—Å–∏–º—É–º –ø–∞—Ä: {max_pairs}")
    st.write(f"–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏: {grid_range_pct}%")
    st.write(f"–®–∞–≥ —Å–µ—Ç–∫–∏: {grid_step_pct}%")

# –í–∫–ª–∞–¥–∫–∞ 4: –ì—Ä–∞—Ñ–∏–∫–∏
with tab4:
    st.header("–ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")
    
    selected_symbol = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", popular_pairs, key="chart_symbol")
    
    if selected_symbol and api_key and api_secret:
        try:
            collector = BinanceDataCollector(api_key, api_secret)
            df = collector.get_historical_data(selected_symbol, "1d", 90)
            if not df.empty:
                # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
                fig, ax = plt.subplots(figsize=(12, 6))
                ax.plot(df.index, df['close'], linewidth=2)
                ax.set_title(f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã {selected_symbol} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π")
                ax.set_xlabel("–î–∞—Ç–∞")
                ax.set_ylabel("–¶–µ–Ω–∞ (USDT)")
                ax.grid(True, alpha=0.3)
                st.pyplot(fig)
                
                # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {selected_symbol}")
                st.write(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${df['close'].iloc[-1]:.6f}")
                st.write(f"–ú–∞–∫—Å–∏–º—É–º –∑–∞ –ø–µ—Ä–∏–æ–¥: ${df['high'].max():.6f}")
                st.write(f"–ú–∏–Ω–∏–º—É–º –∑–∞ –ø–µ—Ä–∏–æ–¥: ${df['low'].min():.6f}")
                price_change = ((df['close'].iloc[-1] / df['close'].iloc[0]) - 1) * 100
                st.write(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥: {price_change:.2f}%")
            else:
                st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    elif not api_key or not api_secret:
        st.warning("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤")

# –í–∫–ª–∞–¥–∫–∞ 5: Grid Trading (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
with tab5:
    st.header("Grid Trading –°–∏–º—É–ª—è—Ü–∏—è")
    st.write("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–≤–æ–π–Ω—ã—Ö —Å–µ—Ç–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏ Binance")
    
    # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—á–µ—Ç—É –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    st.info("üí° **–†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:** –í—Å–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ (100%). "
            "–ü—Ä–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–µ —É–±—ã—Ç–æ–∫ –≤—ã—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –æ–±—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞.")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–†–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ Binance")
        st.write(f"**Maker:** {MAKER_COMMISSION_RATE*100:.3f}%")
        st.write(f"**Taker:** {TAKER_COMMISSION_RATE*100:.3f}%")
        
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
        grid_symbol = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏", popular_pairs, key="grid_symbol")
        grid_step = st.slider("–®–∞–≥ —Å–µ—Ç–∫–∏ (%)", 0.1, 2.0, 0.5, 0.1, key="grid_step")
        grid_range = st.slider("–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏ (%)", 5.0, 50.0, 20.0, 1.0, key="grid_range")
        stop_loss = st.slider("–°—Ç–æ–ø-–ª–æ—Å—Å (%)", 1.0, 10.0, 5.0, 0.5, key="stop_loss")
        stop_loss_coverage = st.slider("–ü–æ–∫—Ä—ã—Ç–∏–µ —É–±—ã—Ç–∫–æ–≤", 0.0, 1.0, 0.5, 0.1, key="stop_loss_coverage")
        
        stop_loss_strategy = st.selectbox(
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞",
            ["independent", "close_both"],
            help="independent: —Å–µ—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ, close_both: –ø—Ä–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–µ –æ–¥–Ω–æ–π –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –æ–±–µ",
            key="stop_loss_strategy"
        )
        
    with col2:
        timeframe_choice = st.selectbox(
            "–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏",
            ["1h", "1d"],
            index=0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            help="–ß–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—é—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏",
            key="timeframe_choice"
        )
        
        period_days = st.slider("–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–Ω–µ–π)", 7, 90, 30, 1, key="period_days")        
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é Grid Trading", key="run_grid_simulation"):
            if not api_key or not api_secret:
                st.error("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏")
            else:
                try:
                    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤
                    collector = BinanceDataCollector(api_key, api_secret)
                    grid_analyzer = GridAnalyzer(collector)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏..."):
                        if timeframe_choice == "1h":
                            df = collector.get_historical_data(grid_symbol, "1h", period_days * 24)
                        else:
                            df = collector.get_historical_data(grid_symbol, "1d", period_days)
                        
                    if df.empty:
                        st.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—ã {grid_symbol}")
                    else:
                        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–º—É–ª—è—Ü–∏—é..."):
                            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏
                            result = grid_analyzer.estimate_dual_grid_by_candles(
                                df,
                                grid_range_pct=grid_range,
                                grid_step_pct=grid_step,
                                use_real_commissions=True,  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
                                stop_loss_pct=stop_loss,
                                stop_loss_coverage=stop_loss_coverage,
                                stop_loss_strategy=stop_loss_strategy,
                                close_both_on_stop_loss=(stop_loss_strategy == "close_both")
                            )
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        st.success("–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏ Binance")
                        
                        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        col_a, col_b, col_c = st.columns(3)
                        
                        with col_a:
                            st.metric(
                                "–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                                f"{result['combined_pct']:.2f}%",
                                delta=None
                            )
                            st.metric(
                                "–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫",
                                result['total_trades']
                            )
                        with col_b:
                            st.metric(
                                "Long –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                                f"{result['long_pct']:.2f}%"
                            )
                            st.metric(
                                "–ú–æ–ª–Ω–∏–π",
                                result['lightning_count']
                            )
                        
                        with col_c:
                            st.metric(
                                "Short –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                                f"{result['short_pct']:.2f}%"
                            )
                            st.metric(
                                "–°—Ç–æ–ø-–ª–æ—Å—Å–æ–≤",
                                result['stop_loss_count']
                            )
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                        st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                        results_df = pd.DataFrame({
                            '–ú–µ—Ç—Ä–∏–∫–∞': [
                                '–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                                'Long –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                                'Short –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                                '–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫',
                                '–ú–æ–ª–Ω–∏–π',
                                '–°—Ç–æ–ø-–ª–æ—Å—Å–æ–≤',
                                'Long –∞–∫—Ç–∏–≤–Ω–∞',
                                'Short –∞–∫—Ç–∏–≤–Ω–∞',
                                '–®–∞–≥ —Å–µ—Ç–∫–∏ (%)',
                                '–¢–∞–π–º—Ñ—Ä–µ–π–º',
                                '–ü–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π)'
                            ],
                            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                                f"{result['combined_pct']:.2f}",
                                f"{result['long_pct']:.2f}",
                                f"{result['short_pct']:.2f}",
                                str(result['total_trades']),
                                str(result['lightning_count']),
                                str(result['stop_loss_count']),
                                "–î–∞" if result['long_active'] else "–ù–µ—Ç",
                                "–î–∞" if result['short_active'] else "–ù–µ—Ç",
                                f"{result['grid_step_pct']:.2f}",
                                str(timeframe_choice),
                                str(period_days)
                            ]})
                        
                        st.dataframe(results_df, use_container_width=True)
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∏—Å—Å–∏—è—Ö
                        st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∏—Å—Å–∏—è—Ö")
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —É–ø–ª–∞—á–µ–Ω–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é
                        total_maker = result['long_maker_trades'] + result['short_maker_trades']
                        total_taker = result['long_taker_trades'] + result['short_taker_trades']
                        
                        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –æ–±—â–µ–π –∫–æ–º–∏—Å—Å–∏–∏
                        total_commission_cost = (total_maker * MAKER_COMMISSION_RATE + total_taker * TAKER_COMMISSION_RATE) * 100
                        
                        st.metric("–û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è —É–ø–ª–∞—á–µ–Ω–∞", f"{total_commission_cost:.3f}%")
                        st.caption("–ö–æ–º–∏—Å—Å–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –æ—Ç –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏: Maker 0.02%, Taker 0.05%")
                        
                        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        st.subheader("–í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                        if timeframe_choice == "1h":
                            st.success("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏")
                        else:
                            st.info("‚ÑπÔ∏è –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                            
                        if result['combined_pct'] > 0:
                            st.success(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–∞: {result['combined_pct']:.2f}%")
                        else:
                            st.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–±—ã—Ç–æ—á–Ω–∞: {result['combined_pct']:.2f}%")
                            
                        st.info("üí° –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π Binance")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")


def run_analysis():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        if not api_key or not api_secret:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ Binance")
            return
        
        with log_container:
            st.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."):
                collector = BinanceDataCollector(api_key, api_secret)
                grid_analyzer = GridAnalyzer(collector)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
            with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä..."):
                pairs = popular_pairs[:max_pairs]
                st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    except Exception as e:
        log_container.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏)
if start_analysis:
    run_analysis()

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏)
st.markdown("---")
st.info(
    """
    ### üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    
    **Grid Trading –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤–∫–ª–∞–¥–∫–µ ‚ö° Grid Trading**
    
    1. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ API –∫–ª—é—á–∏ Binance –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "‚ö° Grid Trading"
    3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–º—É–ª—è—Ü–∏—é
    4. –î–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "üìà –ì—Ä–∞—Ñ–∏–∫–∏"
    
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏ Binance (Maker 0.02%, Taker 0.05%)
    - –ß–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
    - –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
    """
)

# –§—É—Ç–µ—Ä
st.caption("¬© 2025 –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance")
