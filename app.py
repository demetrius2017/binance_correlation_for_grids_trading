"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit.
"""

import os
import time
import json
from datetime import datetime
from typing import List, Dict, Any, Tuple

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from binance.client import Client

from modules.collector import BinanceDataCollector
from modules.processor import DataProcessor
from modules.correlation import CorrelationAnalyzer
from modules.portfolio import PortfolioBuilder


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π
def save_api_keys(api_key: str, api_secret: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª config.json"""
    config = {
        "api_key": api_key,
        "api_secret": api_secret
    }
    with open("config.json", "w") as f:
        json.dump(config, f)
    print("API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config.json")

def load_api_keys() -> Tuple[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ config.json"""
    try:
        if os.path.exists("config.json"):
            with open("config.json", "r") as f:
                config = json.load(f)
            return config.get("api_key", ""), config.get("api_secret", "")
        return "", ""
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ API –∫–ª—é—á–µ–π: {e}")
        return "", ""


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance",
    page_icon="üìä",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö API –∫–ª—é—á–µ–π
    saved_api_key, saved_api_secret = load_api_keys()
    
    # –í–≤–æ–¥ API –∫–ª—é—á–µ–π
    api_key = st.text_input("API Key", value=saved_api_key)
    api_secret = st.text_input("API Secret", value=saved_api_secret, type="password")
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–µ–π
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á–∏"):
        if api_key and api_secret:
            save_api_keys(api_key, api_secret)
            st.success("API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            st.error("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
    
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    min_age_days = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—ã (–¥–Ω–µ–π)", 30, 365, 365)
    min_volatility = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)", 1.0, 10.0, 5.0, 0.5)
    max_range_percent = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –±–æ–∫–æ–≤–∏–∫–∞ (%)", 10.0, 50.0, 30.0, 1.0)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è")
    volatility_weight = st.slider("–í–µ—Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏", 0.0, 1.0, 0.7, 0.1)
    sideways_weight = st.slider("–í–µ—Å –±–æ–∫–æ–≤–∏–∫–∞", 0.0, 1.0, 0.3, 0.1)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")
    correlation_method = st.selectbox("–ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", ["pearson", "spearman", "kendall"])
    correlation_threshold = st.slider("–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", 0.1, 0.9, 0.3, 0.1)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    optimization_goal = st.selectbox("–¶–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", ["sharpe", "min_volatility"])
    risk_free_rate = st.slider("–ë–µ–∑—Ä–∏—Å–∫–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (%)", 0.0, 5.0, 0.0, 0.1) / 100.0
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    start_analysis = st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
tab1, tab2, tab3, tab4 = st.tabs(["–†–µ–π—Ç–∏–Ω–≥ –ø–∞—Ä", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", "–ì—Ä–∞—Ñ–∏–∫–∏"])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
def run_analysis():
    if not api_key or not api_secret:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ Binance")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_text = "–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    progress_bar = st.progress(0, text=progress_text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    log_container = st.empty()
    log_container.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤
        collector = BinanceDataCollector(api_key, api_secret)
        processor = DataProcessor(collector)
        correlation_analyzer = CorrelationAnalyzer(collector)
        portfolio_builder = PortfolioBuilder(collector, correlation_analyzer)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
        log_container.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API...")
        status = collector.client.get_system_status()
        log_container.success(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –°—Ç–∞—Ç—É—Å: {status['msg']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç –∏ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        saved_api_key, saved_api_secret = load_api_keys()
        if (not saved_api_key or not saved_api_secret) and api_key and api_secret:
            save_api_keys(api_key, api_secret)
            log_container.success("API –∫–ª—é—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä
        progress_bar.progress(10, text="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä...")
        log_container.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å Binance...")
        all_pairs = collector.get_all_usdt_pairs()
        log_container.info(f"–ù–∞–π–¥–µ–Ω–æ {len(all_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å USDT")
        
        progress_bar.progress(20, text="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É...")
        log_container.info("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É (–Ω–µ –º–µ–Ω–µ–µ 1 –≥–æ–¥–∞)...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã
        log_container.info("–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
        analyzed = processor.analyze_all_pairs(
            min_age_days=min_age_days,
            min_volatility=min_volatility,
            max_range_percent=max_range_percent
        )
        
        if analyzed.empty:
            log_container.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä.")
            st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
            return
        
        log_container.success(f"–ù–∞–π–¥–µ–Ω–æ {len(analyzed)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä!")
        
        progress_bar.progress(40, text="–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä...")
        log_container.info("–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º...")
        
        # –†–∞–Ω–∂–∏—Ä—É–µ–º –ø–∞—Ä—ã
        ranked = processor.rank_pairs(
            volatility_weight=volatility_weight,
            sideways_weight=sideways_weight
        )
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-10 –ø–∞—Ä –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        top_pairs = processor.get_top_pairs(10)
        symbols = top_pairs['symbol'].tolist()
        
        log_container.success(f"–¢–æ–ø –ø–∞—Ä—ã: {', '.join(symbols)}")
        
        progress_bar.progress(60, text="–†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π...")
        log_container.info("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
          # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        price_data = correlation_analyzer.collect_price_data(symbols, days=min_age_days)
        
        log_container.info("–†–∞—Å—á–µ—Ç –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π...")
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        correlation = correlation_analyzer.calculate_correlation(method=correlation_method)
        
        log_container.info("–ü–æ–∏—Å–∫ –Ω–∞–∏–º–µ–Ω–µ–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä...")
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–º–µ–Ω–µ–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
        least_correlated = correlation_analyzer.find_least_correlated_pairs(
            threshold=correlation_threshold,
            min_pairs=5
        )
        
        if len(least_correlated) < 2:
            log_container.warning(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä: {len(least_correlated)}. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2.")
            log_container.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ø –ø–∞—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω—å—à–µ 2 –ø–∞—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ø–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
            least_correlated = symbols[:min(5, len(symbols))]
        
        log_container.success(f"–ù–∞–∏–º–µ–Ω–µ–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã: {', '.join(least_correlated)}")
        
        progress_bar.progress(80, text="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        log_container.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_builder.set_portfolio_symbols(least_correlated)
        
        # –°—Ç—Ä–æ–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        portfolio_stats = portfolio_builder.build_optimal_portfolio(
            optimization_goal=optimization_goal,
            risk_free_rate=risk_free_rate
        )
        
        progress_bar.progress(100, text="–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        log_container.success("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        time.sleep(1)
        progress_bar.empty()
        log_container.empty()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with tab1:
            st.header("–†–µ–π—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            st.dataframe(
                ranked[['symbol', 'avg_daily_volatility', 'price_range_percent', 'is_sideways', 'total_score']]
                .rename(columns={
                    'symbol': '–°–∏–º–≤–æ–ª',
                    'avg_daily_volatility': '–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)',
                    'price_range_percent': '–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã (%)',
                    'is_sideways': '–í –±–æ–∫–æ–≤–∏–∫–µ',
                    'total_score': '–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥'
                })
                .style.format({
                    '–°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (%)': '{:.2f}',
                    '–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã (%)': '{:.2f}',
                    '–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥': '{:.4f}'
                })
                .background_gradient(subset=['–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥'], cmap='viridis')
            )
            
        with tab2:
            st.header("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
            st.write("–ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:", correlation_method)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            fig, ax = plt.subplots(figsize=(10, 8))
            sns.heatmap(correlation, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5, ax=ax)
            ax.set_title(f"–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π ({correlation_method})")
            st.pyplot(fig)
            
            st.subheader("–ù–∞–∏–º–µ–Ω–µ–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã")
            st.write(", ".join(least_correlated))
            
        with tab3:
            st.header("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
            st.write("–¶–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:", optimization_goal)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è
            if portfolio_stats:
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("–í–µ—Å–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ")
                    weights_df = pd.DataFrame({
                        '–°–∏–º–≤–æ–ª': portfolio_stats['symbols'],
                        '–í–µ—Å (%)': [w * 100 for w in portfolio_stats['weights']]
                    })
                    st.dataframe(weights_df.style.format({'–í–µ—Å (%)': '{:.2f}'}))
                
                with col2:
                    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
                    stats_df = pd.DataFrame({
                        '–ú–µ—Ç—Ä–∏–∫–∞': ['–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞'],
                        '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                            portfolio_stats['expected_return'],
                            portfolio_stats['volatility'],
                            portfolio_stats['sharpe_ratio']
                        ]
                    })
                    st.dataframe(stats_df.style.format({'–ó–Ω–∞—á–µ–Ω–∏–µ': '{:.4f}'}))
                  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.bar(portfolio_stats['symbols'], [w * 100 for w in portfolio_stats['weights']])
                ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ")
                ax.set_ylabel("–í–µ—Å (%)")
                ax.set_xlabel("–°–∏–º–≤–æ–ª")
                plt.xticks(rotation=45)
                st.pyplot(fig)
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å.")
                
        with tab4:
            st.header("–ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")
            
            # –í—ã–±–æ—Ä –ø–∞—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            selected_symbol = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", symbols)
            
            if selected_symbol:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
                    pair_data = collector.get_historical_data(
                        selected_symbol, Client.KLINE_INTERVAL_1DAY, days=min_age_days
                    )
                    
                    if not pair_data.empty:
                        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
                        fig, ax = plt.subplots(figsize=(12, 6))
                        ax.plot(pair_data.index, pair_data['close'])
                        ax.set_title(f"–¶–µ–Ω–∞ {selected_symbol}")
                        ax.set_ylabel("–¶–µ–Ω–∞")
                        ax.set_xlabel("–î–∞—Ç–∞")
                        ax.grid(True)
                        st.pyplot(fig)
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–∞—Ä–µ
                        stats = next((item for item in ranked.to_dict('records') 
                                    if item['symbol'] == selected_symbol), None)
                        
                        if stats:
                            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–µ")
                            st.write(f"–°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {stats['avg_daily_volatility']:.2f}%")
                            st.write(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã: {stats['price_range_percent']:.2f}%")
                            st.write(f"–í –±–æ–∫–æ–≤–∏–∫–µ: {'–î–∞' if stats['is_sideways'] else '–ù–µ—Ç'}")
                            st.write(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['total_score']:.4f}")
                    else:
                        st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    except Exception as e:
        log_container.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
if start_analysis:
    run_analysis()
else:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    st.info(
        """
        ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        
        1. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ API –∫–ª—é—á–∏ Binance –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∂–µ–ª–∞–Ω–∏—é
        3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"
        4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
        
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–∫–ª—é—á–∞—é—Ç:
        - –†–µ–π—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        - –ú–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É —Ç–æ–ø-–ø–∞—Ä–∞–º–∏
        - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏
        - –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä
        """
    )


# –§—É—Ç–µ—Ä
st.markdown("---")
st.caption("¬© 2025 –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance")
