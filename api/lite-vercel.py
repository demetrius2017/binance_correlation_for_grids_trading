"""
–û–±–ª–µ–≥—á—ë–Ω–Ω–∞—è Flask API –¥–ª—è Vercel —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º 250MB
–ë–µ–∑ pandas, matplotlib - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

from flask import Flask, request, jsonify, render_template_string
import json
import os
import sys
import time
from datetime import datetime
from typing import Dict, Any, List
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from modules.collector_lite import BinanceDataCollector

app = Flask(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–º–∏—Å—Å–∏–π Binance
MAKER_COMMISSION_RATE = 0.0002  # 0.02%
TAKER_COMMISSION_RATE = 0.0005  # 0.05%

# –û–±–ª–µ–≥—á—ë–Ω–Ω—ã–π HTML —à–∞–±–ª–æ–Ω
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Binance Grid Trading - Lite</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px;
        }
        .header { 
            text-align: center; 
            margin-bottom: 30px; 
            background: white;
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        .header h1 {
            background: linear-gradient(45deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 3em;
            margin-bottom: 10px;
        }
        .card {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .grid-2 {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #333;
        }
        .form-group input, .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e9ecef;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }
        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: transform 0.2s;
            width: 100%;
        }
        .btn:hover {
            transform: translateY(-2px);
        }
        .results {
            margin-top: 30px;
        }
        .loading {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s;
        }
        .loading.show {
            opacity: 1;
            visibility: visible;
        }
        .spinner {
            border: 4px solid rgba(255,255,255,0.3);
            border-radius: 50%;
            border-top: 4px solid white;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin-bottom: 20px;
        }
        .loading-text {
            color: white;
            font-size: 18px;
            text-align: center;
        }
        .error { 
            color: #dc3545; 
            background: #f8d7da; 
            padding: 15px; 
            border-radius: 10px; 
            margin: 10px 0; 
            border-left: 4px solid #dc3545;
        }
        .success { 
            color: #155724; 
            background: #d4edda; 
            padding: 15px; 
            border-radius: 10px; 
            margin: 10px 0; 
            border-left: 4px solid #28a745;
        }
        .warning {
            color: #856404;
            background: #fff3cd;
            padding: 15px;
            border-radius: 10px;
            margin: 10px 0;
            border-left: 4px solid #ffc107;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä Binance Grid Trading</h1>
            <p>Lite –≤–µ—Ä—Å–∏—è –¥–ª—è Vercel (–ø–æ–¥ 250MB –ª–∏–º–∏—Ç)</p>
            <div class="warning">
                ‚ö†Ô∏è –û–±–ª–µ–≥—á—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞, 
                –ø–æ–ª–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Grid Trading –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            </div>
        </div>

        <div class="card">
            <h3>üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä</h3>
            <p>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä —Å Binance</p>
            <div class="grid-2">
                <div class="form-group">
                    <label>–ú–∏–Ω. –æ–±—ä–µ–º (USDT):</label>
                    <input type="number" id="minVolume" value="10000000" min="1000000">
                </div>
                <div class="form-group">
                    <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä:</label>
                    <input type="number" id="maxPairs" value="30" min="5" max="100">
                </div>
            </div>
            <button class="btn" onclick="analyzePairs()">üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å</button>
        </div>

        <div class="card">
            <h3>‚öôÔ∏è API –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
            <div class="form-group">
                <label>Binance API Key:</label>
                <input type="password" id="apiKey" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á">
            </div>
            <div class="form-group">
                <label>Binance API Secret:</label>
                <input type="password" id="apiSecret" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á">
            </div>
            <button class="btn" onclick="saveCredentials()">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            
            <div style="margin-top: 30px;">
                <h4>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h4>
                <p><strong>–í–µ—Ä—Å–∏—è:</strong> Lite (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Vercel 250MB –ª–∏–º–∏—Ç)</p>
                <p><strong>–î–æ—Å—Ç—É–ø–Ω–æ:</strong></p>
                <ul>
                    <li>‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä</li>
                    <li>‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance</li>
                    <li>‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—á—ë—Ç—ã</li>
                </ul>
                <p><strong>–¢—Ä–µ–±—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:</strong></p>
                <ul>
                    <li>üìä Grid Trading —Å–∏–º—É–ª—è—Ü–∏—è</li>
                    <li>ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</li>
                    <li>üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</li>
                </ul>
            </div>
        </div>

        <div id="analysisResults" class="results" style="display: none;">
            <div id="analysisContent"></div>
        </div>
    </div>

    <div class="loading" id="loading">
        <div class="spinner"></div>
        <div class="loading-text" id="loadingText">–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</div>
    </div>

    <script>
        function saveCredentials() {
            const apiKey = document.getElementById('apiKey').value;
            const apiSecret = document.getElementById('apiSecret').value;
            
            if (apiKey && apiSecret) {
                localStorage.setItem('binance_api_key', apiKey);
                localStorage.setItem('binance_api_secret', apiSecret);
                showMessage('success', 'API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
            } else {
                showMessage('error', '–í–≤–µ–¥–∏—Ç–µ –æ–±–∞ –∫–ª—é—á–∞');
            }
        }

        function loadCredentials() {
            const apiKey = localStorage.getItem('binance_api_key') || '';
            const apiSecret = localStorage.getItem('binance_api_secret') || '';
            
            document.getElementById('apiKey').value = apiKey;
            document.getElementById('apiSecret').value = apiSecret;
        }

        function getCredentials() {
            const apiKey = localStorage.getItem('binance_api_key');
            const apiSecret = localStorage.getItem('binance_api_secret');
            
            if (!apiKey || !apiSecret) {
                showMessage('error', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
                return null;
            }
            
            return { apiKey, apiSecret };
        }

        function showMessage(type, message) {
            const existingMessages = document.querySelectorAll('.error, .success, .warning');
            existingMessages.forEach(msg => msg.remove());
            
            const messageDiv = document.createElement('div');
            messageDiv.className = type;
            messageDiv.textContent = message;
            
            document.querySelector('.container').appendChild(messageDiv);
            
            setTimeout(() => messageDiv.remove(), 5000);
        }

        function showLoading(text = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...') {
            document.getElementById('loadingText').textContent = text;
            document.getElementById('loading').classList.add('show');
        }

        function hideLoading() {
            document.getElementById('loading').classList.remove('show');
        }

        window.onload = function() {
            loadCredentials();
        };

        async function analyzePairs() {
            const creds = getCredentials();
            if (!creds) return;

            showLoading('–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...');

            try {
                const response = await fetch('/api/analyze', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        api_key: creds.apiKey,
                        api_secret: creds.apiSecret,
                        min_volume: parseInt(document.getElementById('minVolume').value),
                        max_pairs: parseInt(document.getElementById('maxPairs').value)
                    })
                });

                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('analysisResults').style.display = 'block';
                    document.getElementById('analysisContent').innerHTML = `
                        <div class="success">‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ ${data.pairs_count} –ø–∞—Ä</div>
                        <div class="card">
                            <h4>üìã –¢–æ–ø —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã:</h4>
                            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; margin-top: 15px;">
                                ${data.pairs.slice(0, 20).map((pair, index) => 
                                    `<div style="background: #f8f9fa; padding: 10px; border-radius: 8px; text-align: center; font-weight: bold;">
                                        <span style="color: #667eea;">#${index + 1}</span><br>${pair}
                                    </div>`
                                ).join('')}
                            </div>
                        </div>
                    `;
                    showMessage('success', `–ù–∞–π–¥–µ–Ω–æ ${data.pairs_count} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä`);
                } else {
                    showMessage('error', data.error);
                }
            } catch (error) {
                showMessage('error', '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
            }
            
            hideLoading();
        }
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template_string(HTML_TEMPLATE)

@app.route('/api/analyze', methods=['POST'])
def analyze_pairs():
    """API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–æ–±–ª–µ–≥—á—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        data = request.json
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        collector = BinanceDataCollector(data['api_key'], data['api_secret'])
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö USDT –ø–∞—Ä
        all_pairs = collector.get_all_usdt_pairs()
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        filtered_pairs = all_pairs[:data['max_pairs']]
        
        return jsonify({
            'success': True,
            'pairs_count': len(filtered_pairs),
            'pairs': filtered_pairs
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return jsonify({
        'status': 'healthy',
        'version': 'lite',
        'description': 'Binance Grid Trading - Lite version for Vercel 250MB limit'
    })

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == '__main__':
    app.run(debug=True)

# –î–ª—è Vercel
def handler(request):
    return app(request.environ, lambda status, headers: None)
