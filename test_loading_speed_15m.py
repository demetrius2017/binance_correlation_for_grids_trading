"""
–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Grid Trading

–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö:
- 1d –∑–∞ 30 –¥–Ω–µ–π = 30 —Å–≤–µ—á–µ–π
- 1d –∑–∞ 90 –¥–Ω–µ–π = 90 —Å–≤–µ—á–µ–π  
- 1h –∑–∞ 30 –¥–Ω–µ–π = 720 —Å–≤–µ—á–µ–π
- 1h –∑–∞ 90 –¥–Ω–µ–π = 2160 —Å–≤–µ—á–µ–π
- 15m –∑–∞ 10 –¥–Ω–µ–π = 960 —Å–≤–µ—á–µ–π
- 15m –∑–∞ 30 –¥–Ω–µ–π = 2880 —Å–≤–µ—á–µ–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API: 1000 —Å–≤–µ—á–µ–π)
"""

import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.collector import BinanceDataCollector

def test_loading_speed():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ endpoints)
    collector = BinanceDataCollector("", "")
    
    test_symbol = "BTCUSDT"  # –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ø–∞—Ä–∞
    
    tests = [
        ("1d", 30, "30 –¥–Ω–µ–π –¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–µ—á–µ–π"),
        ("1d", 90, "90 –¥–Ω–µ–π –¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–µ—á–µ–π"),
        ("1h", 30, "30 –¥–Ω–µ–π —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π (720 —Å–≤–µ—á–µ–π)"),
        ("1h", 90, "90 –¥–Ω–µ–π —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π (2160 —Å–≤–µ—á–µ–π)"),
        ("15m", 10, "10 –¥–Ω–µ–π 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π (960 —Å–≤–µ—á–µ–π)"),
        ("15m", 30, "30 –¥–Ω–µ–π 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π (–º–∞–∫—Å. 1000 —Å–≤–µ—á–µ–π)")
    ]
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {test_symbol}")
    print("=" * 60)
    
    for interval, days, description in tests:
        print(f"\nüìä {description}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: interval={interval}, days={days}")
        
        start_time = time.time()
        try:
            if interval == "15m":
                # –î–ª—è 15-–º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                df = collector.get_historical_data(test_symbol, interval, days * 24 * 4)
            elif interval == "1h":
                # –î–ª—è —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                df = collector.get_historical_data(test_symbol, interval, days * 24)
            else:
                df = collector.get_historical_data(test_symbol, interval, days)
            
            end_time = time.time()
            loading_time = end_time - start_time
            
            if not df.empty:
                print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df)} —Å–≤–µ—á–µ–π")
                print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {loading_time:.2f} —Å–µ–∫—É–Ω–¥")
                print(f"   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {len(df)/loading_time:.0f} —Å–≤–µ—á–µ–π/—Å–µ–∫")
                
                # –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏
                if loading_time < 2:
                    speed_rating = "üü¢ –ë—ã—Å—Ç—Ä–æ"
                elif loading_time < 5:
                    speed_rating = "üü° –ù–æ—Ä–º–∞–ª—å–Ω–æ"
                else:
                    speed_rating = "üî¥ –ú–µ–¥–ª–µ–Ω–Ω–æ"
                    
                print(f"   üìà –û—Ü–µ–Ω–∫–∞: {speed_rating}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                
        except Exception as e:
            end_time = time.time()
            loading_time = end_time - start_time
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {loading_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    print("\n" + "=" * 60)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("‚Ä¢ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (1d)")
    print("‚Ä¢ –î–ª—è –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏: 15m –¥–∞–Ω–Ω—ã–µ, –Ω–æ API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 1000 —Å–≤–µ—á–∞–º–∏ (~10 –¥–Ω–µ–π)")
    print("‚Ä¢ –î–ª—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–º–∞: 1h –∑–∞ 30-90 –¥–Ω–µ–π = —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è")

if __name__ == "__main__":
    test_loading_speed()
