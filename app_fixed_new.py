"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit.
"""

import os
import time
import json
from datetime import datetime, timedelta
from typing import List, Dict, Any, Tuple

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import plotly.graph_objects as go

from modules.collector import BinanceDataCollector
from modules.processor import DataProcessor
from modules.correlation import CorrelationAnalyzer
from modules.portfolio import PortfolioBuilder
from modules.grid_analyzer import GridAnalyzer, MAKER_COMMISSION_RATE, TAKER_COMMISSION_RATE


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π Binance",
    page_icon="üìä",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
if 'api_key' not in st.session_state:
    st.session_state.api_key = ""
if 'api_secret' not in st.session_state:
    st.session_state.api_secret = ""


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π
def save_api_keys(api_key: str, api_secret: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª config.json"""
    config = {
        "api_key": api_key,
        "api_secret": api_secret
    }
    with open("config.json", "w") as f:
        json.dump(config, f)
    print("API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config.json")

def load_api_keys() -> Tuple[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ config.json"""
    try:
        if os.path.exists("config.json"):
            with open("config.json", "r") as f:
                config = json.load(f)
            return config.get("api_key", ""), config.get("api_secret", "")
        return "", ""
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ API –∫–ª—é—á–µ–π: {e}")
        return "", ""


# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
    saved_api_key, saved_api_secret = load_api_keys()
    
    api_key = st.text_input(
        "API Key", 
        value=saved_api_key,
        type="password", 
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç Binance"
    )
    api_secret = st.text_input(
        "API Secret", 
        value=saved_api_secret,
        type="password", 
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç Binance"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏"):
        if api_key and api_secret:
            save_api_keys(api_key, api_secret)
            st.success("API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            st.error("–í–≤–µ–¥–∏—Ç–µ –æ–±–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    st.markdown("---")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    min_volume = st.number_input(
        "–ú–∏–Ω. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (USDT)", 
        min_value=1000000, 
        max_value=1000000000, 
        value=10000000,
        step=1000000,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞"
    )
    
    min_price = st.number_input(
        "–ú–∏–Ω. —Ü–µ–Ω–∞ (USDT)", 
        min_value=0.0001, 
        max_value=100.0, 
        value=0.01,
        step=0.01,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
    )
    
    max_price = st.number_input(
        "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (USDT)", 
        min_value=1.0, 
        max_value=10000.0, 
        value=100.0,
        step=10.0,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
    )
    
    max_pairs = st.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
        min_value=5, 
        max_value=100, 
        value=30,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–µ—Ç–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Grid Trading")
    
    grid_range_pct = st.slider(
        "–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏ (%)", 
        min_value=5.0, 
        max_value=50.0, 
        value=20.0,
        step=1.0,
        help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–µ—Ç–∫–∏"
    )
    
    grid_step_pct = st.slider(
        "–®–∞–≥ —Å–µ—Ç–∫–∏ (%)", 
        min_value=0.1, 
        max_value=5.0, 
        value=1.0,
        step=0.1,
        help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —à–∞–≥ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ —Å–µ—Ç–∫–∏"
    )

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
start_analysis = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
log_container = st.container()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
collector = None
grid_analyzer = None
correlation_analyzer = None
portfolio_builder = None
data = {}
symbols = []
results_df = pd.DataFrame()
correlation_matrix = pd.DataFrame()

def initialize_components():
    global collector, grid_analyzer, correlation_analyzer, portfolio_builder
    if not api_key or not api_secret:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ Binance")
        return False
    
    try:
        collector = BinanceDataCollector(api_key, api_secret)
        grid_analyzer = GridAnalyzer(collector)
        correlation_analyzer = CorrelationAnalyzer(collector)
        portfolio_builder = PortfolioBuilder(collector, correlation_analyzer)
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {str(e)}")
        return False

def run_analysis():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    global data, symbols, results_df, correlation_matrix
    
    if not initialize_components():
        return
    
    try:
        with log_container:
            st.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
            with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä..."):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
                popular_pairs = [
                    "BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "XRPUSDT",
                    "LINKUSDT", "DOTUSDT", "LTCUSDT", "UNIUSDT", "SOLUSDT",
                    "MATICUSDT", "ICXUSDT", "VETUSDT", "XLMUSDT", "TRXUSDT"
                ]
                pairs = popular_pairs[:max_pairs]
                st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä –†–µ–π—Ç–∏–Ω–≥ –ø–∞—Ä", 
            "üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", 
            "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", 
            "üìà –ì—Ä–∞—Ñ–∏–∫–∏",
            "‚ö° Grid Trading"
        ])
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –†–µ–π—Ç–∏–Ω–≥ –ø–∞—Ä
        with tab1:
            st.header("–†–µ–π—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã..."):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                data = {}
                symbols = []
                
                for symbol in pairs:
                    df = collector.get_historical_data(symbol, "1d", 30)
                    if not df.empty:
                        analysis = grid_analyzer.analyze_pair(df)
                        if analysis and analysis.get('total_score', 0) > 0:
                            data[symbol] = analysis
                            symbols.append(symbol)
                
                if data:
                    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    results_df = pd.DataFrame.from_dict(data, orient='index')
                    results_df = results_df.sort_values('total_score', ascending=False)
                    
                    st.subheader("–¢–æ–ø-15 —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    display_df = results_df.head(15).copy()
                    display_df = display_df.round(4)
                    
                    st.dataframe(display_df, use_container_width=True)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    results_df.to_csv("pair_analysis_results.csv")
                    st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ pair_analysis_results.csv")
                else:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã")
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        with tab2:
            st.header("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
            
            if 'results_df' in locals() and not results_df.empty:
                top_pairs = results_df.head(15).index.tolist()
                
                with st.spinner("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏..."):
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    price_data = {}
                    for symbol in top_pairs:
                        df = collector.get_historical_data(symbol, "1d", 30)
                        if not df.empty:
                            price_data[symbol] = df['close']
                    
                    if len(price_data) >= 2:
                        correlation_matrix = pd.DataFrame(price_data).corr()
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
                        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
                        fig, ax = plt.subplots(figsize=(12, 10))
                        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, ax=ax)
                        plt.title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ü–µ–Ω –∞–∫—Ç–∏–≤–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
                        st.pyplot(fig)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        correlation_matrix.to_csv("correlation_matrix.csv")
                        st.success("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ correlation_matrix.csv")
                    else:
                        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –ü–æ—Ä—Ç—Ñ–µ–ª—å
        with tab3:
            st.header("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            
            if 'correlation_matrix' in locals() and not correlation_matrix.empty:
                with st.spinner("–°—Ç—Ä–æ–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å..."):
                    # –°—Ç—Ä–æ–∏–º –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π
                    optimal_portfolio = {
                        symbol: 1.0/len(correlation_matrix.columns) 
                        for symbol in correlation_matrix.columns[:10]
                    }
                    
                    if optimal_portfolio:
                        st.subheader("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
                        portfolio_df = pd.DataFrame([
                            {"–ê–∫—Ç–∏–≤": asset, "–í–µ—Å": f"{weight:.1%}"} 
                            for asset, weight in optimal_portfolio.items()
                        ])
                        
                        st.dataframe(portfolio_df, use_container_width=True)
                        
                        # –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
                        avg_correlations = []
                        portfolio_symbols = list(optimal_portfolio.keys())
                        for i in range(len(portfolio_symbols)):
                            for j in range(i + 1, len(portfolio_symbols)):
                                avg_correlations.append(correlation_matrix.loc[portfolio_symbols[i], portfolio_symbols[j]])
                        avg_correlation = sum(avg_correlations) / len(avg_correlations) if avg_correlations else 0
                        st.metric("–°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è", f"{avg_correlation:.3f}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
                        portfolio_df.to_csv("optimal_portfolio.csv", index=False)
                        st.success("–ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ optimal_portfolio.csv")
                    else:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –ì—Ä–∞—Ñ–∏–∫–∏
        with tab4:
            st.header("–ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")
            
            if 'symbols' in locals() and symbols:
                selected_symbol = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", symbols)
                
                try:
                    df = collector.get_historical_data(selected_symbol, "1d", 90)
                    if not df.empty:
                        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
                        fig, ax = plt.subplots(figsize=(12, 6))
                        ax.plot(df.index, df['close'], linewidth=2)
                        ax.set_title(f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã {selected_symbol} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π")
                        ax.set_xlabel("–î–∞—Ç–∞")
                        ax.set_ylabel("–¶–µ–Ω–∞ (USDT)")
                        ax.grid(True, alpha=0.3)
                        st.pyplot(fig)
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–∞
                        if selected_symbol in data:
                            stats = data[selected_symbol]
                            st.subheader(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {selected_symbol}")
                            st.write(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {stats['volatility']:.4f}")
                            st.write(f"–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ${stats['volume_24h']:,.0f}")
                            st.write(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã: {stats['price_range_percent']:.2f}%")
                            st.write(f"–í –±–æ–∫–æ–≤–∏–∫–µ: {'–î–∞' if stats['is_sideways'] else '–ù–µ—Ç'}")
                            st.write(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['total_score']:.4f}")
                    else:
                        st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                    
        # –í–∫–ª–∞–¥–∫–∞ 5: Grid Trading
        with tab5:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Grid Trading
            show_grid_trading_tab()
            
    except Exception as e:
        log_container.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return

def show_grid_trading_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–µ—Ç–∫–∏"""
    global grid_analyzer, collector
    
    if not initialize_components():
        return
        
    st.header("Grid Trading –°–∏–º—É–ª—è—Ü–∏—è")
    st.write("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–≤–æ–π–Ω—ã—Ö —Å–µ—Ç–æ–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏ Binance")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("–†–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ Binance")
        st.write(f"**Maker:** {MAKER_COMMISSION_RATE*100:.3f}%")
        st.write(f"**Taker:** {TAKER_COMMISSION_RATE*100:.3f}%")
        
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
        grid_symbol = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏", symbols if symbols else ["BTCUSDT"])
        grid_step = st.slider("–®–∞–≥ —Å–µ—Ç–∫–∏ (%)", 0.1, 2.0, 0.5, 0.1)
        grid_range = st.slider("–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏ (%)", 5.0, 50.0, 20.0, 1.0)
        stop_loss = st.slider("–°—Ç–æ–ø-–ª–æ—Å—Å (%)", 1.0, 10.0, 5.0, 0.5)
        stop_loss_coverage = st.slider("–ü–æ–∫—Ä—ã—Ç–∏–µ —É–±—ã—Ç–∫–æ–≤", 0.0, 1.0, 0.5, 0.1)
        
        stop_loss_strategy = st.selectbox(
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞",
            ["independent", "close_both"],
            help="independent: —Å–µ—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ, close_both: –ø—Ä–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–µ –æ–¥–Ω–æ–π –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –æ–±–µ"
        )
        
    with col2:
        timeframe_choice = st.selectbox(
            "–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏",
            ["1h", "1d"],
            index=0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            help="–ß–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–∞—é—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"
        )
        
        period_days = st.slider("–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–Ω–µ–π)", 7, 90, 30, 1)
        
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é Grid Trading"):
            if not api_key or not api_secret:
                st.error("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏")
            else:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏..."):
                        if timeframe_choice == "1h":
                            df = collector.get_historical_data(grid_symbol, "1h", period_days * 24)
                        else:
                            df = collector.get_historical_data(grid_symbol, "1d", period_days)
                        
                    if df.empty:
                        st.error(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—ã {grid_symbol}")
                    else:
                        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–º—É–ª—è—Ü–∏—é..."):
                            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏
                            result = grid_analyzer.estimate_dual_grid_by_candles(
                                df,
                                grid_range_pct=grid_range,
                                grid_step_pct=grid_step,
                                use_real_commissions=True,  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
                                stop_loss_pct=stop_loss,
                                stop_loss_coverage=stop_loss_coverage,
                                stop_loss_strategy=stop_loss_strategy,
                                close_both_on_stop_loss=(stop_loss_strategy == "close_both")
                            )
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        st.success("–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏ Binance")
                        
                        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        col_a, col_b, col_c = st.columns(3)
                        
                        with col_a:
                            st.metric(
                                "–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                                f"{result['combined_pct']:.2f}%",
                                delta=None
                            )
                            st.metric(
                                "–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫",
                                result['total_trades']
                            )
                        
                        with col_b:
                            st.metric(
                                "Long –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                                f"{result['long_pct']:.2f}%"
                            )
                            st.metric(
                                "Maker —Å–¥–µ–ª–∫–∏",
                                result['long_maker_trades'] + result['short_maker_trades']
                            )
                        
                        with col_c:
                            st.metric(
                                "Short –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å",
                                f"{result['short_pct']:.2f}%"
                            )
                            st.metric(
                                "Taker —Å–¥–µ–ª–∫–∏",
                                result['long_taker_trades'] + result['short_taker_trades']
                            )
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
                        st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                        results_df = pd.DataFrame({
                            '–ú–µ—Ç—Ä–∏–∫–∞': [
                                '–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                                'Long –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                                'Short –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)',
                                '–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫',
                                'Maker —Å–¥–µ–ª–∫–∏',
                                'Taker —Å–¥–µ–ª–∫–∏',
                                '–ú–æ–ª–Ω–∏—è',
                                '–°—Ç–æ–ø-–ª–æ—Å—Å–æ–≤',
                                'Long –∞–∫—Ç–∏–≤–Ω–∞',
                                'Short –∞–∫—Ç–∏–≤–Ω–∞',
                                '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥ (%)',
                                '–¢–∞–π–º—Ñ—Ä–µ–π–º',
                                '–ü–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π)'
                            ],
                            '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                                f"{result['combined_pct']:.2f}",
                                f"{result['long_pct']:.2f}",
                                f"{result['short_pct']:.2f}",
                                result['total_trades'],
                                result['long_maker_trades'] + result['short_maker_trades'],
                                result['long_taker_trades'] + result['short_taker_trades'],
                                result['lightning_count'],
                                result['stop_loss_count'],
                                "–î–∞" if result['long_active'] else "–ù–µ—Ç",
                                "–î–∞" if result['short_active'] else "–ù–µ—Ç",
                                f"{result['grid_step_pct']:.2f}",
                                timeframe_choice,
                                period_days
                            ]
                        })
                        
                        st.dataframe(results_df, use_container_width=True)
                        
                        # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π
                        st.subheader("–ê–Ω–∞–ª–∏–∑ –∫–æ–º–∏—Å—Å–∏–π")
                        total_maker = result['long_maker_trades'] + result['short_maker_trades']
                        total_taker = result['long_taker_trades'] + result['short_taker_trades']
                        maker_ratio = total_maker / result['total_trades'] if result['total_trades'] > 0 else 0
                        
                        st.write(f"**–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–¥–µ–ª–æ–∫:**")
                        st.write(f"- Maker: {total_maker} ({maker_ratio*100:.1f}%)")
                        st.write(f"- Taker: {total_taker} ({(1-maker_ratio)*100:.1f}%)")
                        
                        avg_commission = maker_ratio * MAKER_COMMISSION_RATE + (1-maker_ratio) * TAKER_COMMISSION_RATE
                        st.write(f"**–°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è:** {avg_commission*100:.3f}%")
                        
                        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        st.subheader("–í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                        if timeframe_choice == "1h":
                            st.success("‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏")
                        else:
                            st.info("‚ÑπÔ∏è –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                            
                        if result['combined_pct'] > 0:
                            st.success(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–∞: {result['combined_pct']:.2f}%")
                        else:
                            st.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–±—ã—Ç–æ—á–Ω–∞: {result['combined_pct']:.2f}%")
                            
                        st.info("üí° –í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π Binance")
                        
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {str(e)}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
if start_analysis:
    run_analysis()
else:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    st.info(
        """
        ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        
        1. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ API –∫–ª—é—á–∏ Binance –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∂–µ–ª–∞–Ω–∏—é
        3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"
        4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
        
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–∫–ª—é—á–∞—é—Ç:
        - –†–µ–π—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        - –ú–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É —Ç–æ–ø-–ø–∞—Ä–∞–º–∏
        - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏
        - –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä
        - Grid Trading —Å–∏–º—É–ª—è—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏
        """
    )

# –§—É—Ç–µ—Ä
st.markdown("---")
st.caption("¬© 2025 –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance")
