"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–≥–∞ —Å–µ—Ç–∫–∏ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏ Grid Trading.
"""
import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.grid_analyzer import GridAnalyzer
from modules.collector import BinanceDataCollector

def create_test_data(periods=30):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    """
    dates = pd.date_range(start='2024-01-01', periods=periods, freq='H')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Å–≤–µ—á–∞–º–∏
    np.random.seed(42)
    base_price = 100.0
    
    data = []
    for i in range(periods):
        # –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–ª–µ–±–∞–Ω–∏–π —Ü–µ–Ω—ã ¬±2% —Å –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º–∏ –º–∞–ª—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏
        change = np.random.normal(0, 0.5)  # –°—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ 0%, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ 0.5%
        
        open_price = base_price * (1 + change / 100)
        
        # –î–∏–∞–ø–∞–∑–æ–Ω —Å–≤–µ—á–∏ (–≤—ã—Å–æ—Ç–∞)
        range_pct = abs(np.random.normal(1.0, 0.3))  # –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω 1%, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ 0.3%
        
        high_price = open_price * (1 + range_pct / 200)
        low_price = open_price * (1 - range_pct / 200)
        
        # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_direction = np.random.choice([-1, 1])
        close_price = open_price + close_direction * open_price * (range_pct / 400)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ high –∏ low –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        high_price = max(high_price, open_price, close_price)
        low_price = min(low_price, open_price, close_price)
        
        data.append({
            'timestamp': dates[i],
            'open': open_price,
            'high': high_price,
            'low': low_price,
            'close': close_price,
            'volume': np.random.uniform(1000, 5000)
        })
        
        base_price = close_price
    
    return pd.DataFrame(data)

def test_grid_step_parameter():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä grid_step_pct –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
    """
    print("=== –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ grid_step ===")    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API)
    class MockCollector:
        def __init__(self):
            self.client = None  # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç client
        
        def get_historical_data(self, symbol, interval, limit):
            return pd.DataFrame()
        
        def get_orderbook(self, symbol):
            return {'bids': [], 'asks': []}
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    collector = MockCollector()
    # –û–±—Ö–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤, –ø–µ—Ä–µ–¥–∞–≤–∞—è –æ–±—ä–µ–∫—Ç –∫–∞–∫ –µ—Å—Ç—å
    grid_analyzer = GridAnalyzer(collector)  # type: ignore
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = create_test_data(24)  # 24 —á–∞—Å–∞ –¥–∞–Ω–Ω—ã—Ö
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è grid_step
    test_steps = [0.3, 0.5, 1.0, 1.5, 2.0]
    
    print(f"–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(df)} —Å–≤–µ—á–µ–π")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {df['low'].min():.2f} - {df['high'].max():.2f}")
    print()
    
    for grid_step in test_steps:
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º grid_step = {grid_step}%")
        
        result = grid_analyzer.estimate_dual_grid_by_candles(
            df,
            grid_range_pct=20.0,
            grid_step_pct=grid_step,  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
            use_real_commissions=True,
            stop_loss_pct=5.0,
            stop_loss_coverage=0.5,
            stop_loss_strategy="independent"
        )
        
        returned_step = result['grid_step_pct']
        
        print(f"  –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —à–∞–≥: {grid_step}%")
        print(f"  –í–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π —à–∞–≥: {returned_step}%")
        print(f"  –°–æ–≤–ø–∞–¥–∞—é—Ç: {'‚úÖ' if abs(returned_step - grid_step) < 0.001 else '‚ùå'}")
        print(f"  –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {result['combined_pct']:.2f}%")
        print(f"  –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {result['total_trades']}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏
        assert abs(returned_step - grid_step) < 0.001, f"–û–∂–∏–¥–∞–ª—Å—è —à–∞–≥ {grid_step}%, –ø–æ–ª—É—á–µ–Ω {returned_step}%"
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã passed! –ü–∞—Ä–∞–º–µ—Ç—Ä grid_step_pct –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

def test_interface_display():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ Streamlit)
    """
    print("\n=== –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ ===")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏
    test_result = {
        'combined_pct': 5.25,
        'long_pct': 2.75,
        'short_pct': 2.50,
        'total_trades': 45,
        'lightning_count': 3,
        'stop_loss_count': 1,
        'long_active': True,
        'short_active': True,
        'grid_step_pct': 1.2  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª 1.2%
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ (–∫–æ–¥ –∏–∑ app.py)
    grid_step_display = f"{test_result['grid_step_pct']:.2f}"
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏:")
    print(f"  grid_step_pct –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {test_result['grid_step_pct']}")
    print(f"  –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ: {grid_step_display}%")
    print(f"  –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: {'‚úÖ' if grid_step_display == '1.20' else '‚ùå'}")
    
    print("‚úÖ –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")

if __name__ == "__main__":
    try:
        test_grid_step_parameter()
        test_interface_display()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä grid_step –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ñ—É–Ω–∫—Ü–∏–∏")
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç —à–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω")
        print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —à–∞–≥–∞ —Å–µ—Ç–∫–∏")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise
