"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit.
"""

import os
import time
import json
import requests
from datetime import datetime
from typing import List, Dict, Any, Tuple

import pandas as pd
import numpy as np
import matplotlib
matplotlib.use('Agg')  # –î–ª—è headless –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway, Heroku –∏ —Ç.–¥.)
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from binance.client import Client

from modules.collector import BinanceDataCollector
from modules.processor import DataProcessor
from modules.correlation import CorrelationAnalyzer
from modules.portfolio import PortfolioBuilder
from modules.grid_analyzer import GridAnalyzer
from modules.optimizer import GridOptimizer

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–æ–º–∏—Å—Å–∏–π Binance
MAKER_COMMISSION_RATE = 0.0002  # 0.02%
TAKER_COMMISSION_RATE = 0.0005  # 0.05%


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π
def save_api_keys(api_key: str, api_secret: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª config.json"""
    config = {
        "api_key": api_key,
        "api_secret": api_secret
    }
    with open("config.json", "w") as f:
        json.dump(config, f)
    print("API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config.json")

def get_api_keys_source() -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π –∏—Å–ø–æ–ª—å–∑—É—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    if 'api_keys_source' in st.session_state:
        return st.session_state.api_keys_source
    
    # –ï—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Streamlit secrets
        try:
            if hasattr(st, 'secrets') and 'binance' in st.secrets:
                return "Streamlit Secrets"
        except Exception:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if os.getenv("BINANCE_API_KEY") and os.getenv("BINANCE_API_SECRET"):
            return "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ GitHub –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏)
        if os.path.exists("config.json"):
            return "–õ–æ–∫–∞–ª—å–Ω—ã–π config.json"
        
        return "–ù–µ –Ω–∞–π–¥–µ–Ω—ã"
    except Exception:
        return "–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"

def load_api_keys() -> Tuple[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ session_state
    if 'cached_api_key' in st.session_state and 'cached_api_secret' in st.session_state:
        cached_key = st.session_state.cached_api_key
        cached_secret = st.session_state.cached_api_secret
        if cached_key and cached_secret:
            return cached_key, cached_secret
    
    try:
        api_key = ""
        api_secret = ""
        source = ""
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Streamlit secrets (–¥–ª—è Streamlit Cloud)
        try:
            if hasattr(st, 'secrets') and 'binance' in st.secrets:
                api_key = st.secrets["binance"]["api_key"]
                api_secret = st.secrets["binance"]["api_secret"]
                source = "Streamlit Secrets"
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ secrets
        
        # 2. –ó–∞—Ç–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Heroku, Railway, Render)
        if not api_key or not api_secret:
            env_api_key = os.getenv("BINANCE_API_KEY")
            env_api_secret = os.getenv("BINANCE_API_SECRET")
            if env_api_key and env_api_secret:
                api_key = env_api_key
                api_secret = env_api_secret
                source = "–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        
        # 3. –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ - –∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        if not api_key or not api_secret:
            try:
                github_url = "https://raw.githubusercontent.com/demetrius2017/binance_correlation_for_grids_trading/main/config.json"
                response = requests.get(github_url, timeout=10)
                if response.status_code == 200:
                    github_config = response.json()
                    github_api_key = github_config.get("api_key", "")
                    github_api_secret = github_config.get("api_secret", "")
                    if github_api_key and github_api_secret:
                        api_key = github_api_key
                        api_secret = github_api_secret
                        source = "GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
            except Exception as github_error:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å GitHub
        
        # 4. –ù–∞–∫–æ–Ω–µ—Ü –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ config.json (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
        if not api_key or not api_secret:
            if os.path.exists("config.json"):
                with open("config.json", "r") as f:
                    config = json.load(f)
                local_api_key = config.get("api_key", "")
                local_api_secret = config.get("api_secret", "")
                if local_api_key and local_api_secret:
                    api_key = local_api_key
                    api_secret = local_api_secret
                    source = "–ª–æ–∫–∞–ª—å–Ω–æ–≥–æ config.json"
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        if api_key and api_secret:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∫–ª—é—á–∏
            if ('cached_api_key' not in st.session_state or 
                st.session_state.cached_api_key != api_key or
                st.session_state.cached_api_secret != api_secret):
                
                st.session_state.cached_api_key = api_key
                st.session_state.cached_api_secret = api_secret
                st.session_state.api_keys_source = source
                print(f"‚úÖ API –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {source}")
            
            return api_key, api_secret
        
        return "", ""
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ API –∫–ª—é—á–µ–π: {e}")
        return "", ""


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance",
    page_icon="üìä",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'api_keys_saved' not in st.session_state:
    st.session_state.api_keys_saved = False

if 'filtered_pairs' not in st.session_state:
    st.session_state.filtered_pairs = []

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Grid Trading
if 'grid_simulation_results' not in st.session_state:
    st.session_state.grid_simulation_results = None

if 'grid_simulation_params' not in st.session_state:
    st.session_state.grid_simulation_params = None

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
if 'optimization_results' not in st.session_state:
    st.session_state.optimization_results = None

if 'optimization_params' not in st.session_state:
    st.session_state.optimization_params = None

if 'optimization_best_result' not in st.session_state:
    st.session_state.optimization_best_result = None

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Grid Trading
if 'transfer_params' not in st.session_state:
    st.session_state.transfer_params = None

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
    saved_api_key, saved_api_secret = load_api_keys()
    
    api_key = st.text_input(
        "API Key", 
        value=saved_api_key,
        type="password", 
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç Binance"
    )
    api_secret = st.text_input(
        "API Secret", 
        value=saved_api_secret,
        type="password", 
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç Binance"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏"):
        if api_key and api_secret:
            try:
                save_api_keys(api_key, api_secret)
                st.session_state.api_keys_saved = True
                st.success("API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                time.sleep(1)
                st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: {e}")
        else:
            st.error("–í–≤–µ–¥–∏—Ç–µ –æ–±–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
    keys_source = get_api_keys_source()
    if st.session_state.api_keys_saved or (api_key and api_secret):
        st.success(f"‚úÖ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        if keys_source != "–ù–µ –Ω–∞–π–¥–µ–Ω—ã":
            st.info(f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {keys_source}")
    elif not api_key and not api_secret:
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Binance")
        if keys_source != "–ù–µ –Ω–∞–π–¥–µ–Ω—ã":
            st.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–ª—é—á–∏ –≤: {keys_source}")
    else:
        st.info("üí° –ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏' –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞")
    
    st.markdown("---")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    min_volume = st.number_input(
        "–ú–∏–Ω. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (USDT)", 
        min_value=1000000, 
        max_value=1000000000, 
        value=10000000,
        step=1000000,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞"
    )
    
    min_price = st.number_input(
        "–ú–∏–Ω. —Ü–µ–Ω–∞ (USDT)", 
        min_value=0.0001, 
        max_value=100.0, 
        value=0.01,
        step=0.01,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
    )
    
    max_price = st.number_input(
        "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (USDT)", 
        min_value=1.0, 
        max_value=10000.0, 
        value=100.0,
        step=10.0,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
    )
    
    max_pairs = st.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
        min_value=5, 
        max_value=100, 
        value=30,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
    )

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
saved_api_key, saved_api_secret = load_api_keys()

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
tab1, tab2, tab3, tab4 = st.tabs([
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
    "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "‚ö° Grid Trading",
    "ü§ñ –ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
])

# –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã)
st.markdown("""
<style>
/* –°—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã */
.stTabs [data-baseweb="tab-list"] button [data-testid="stMarkdownContainer"] p {
    font-size: 14px;
    font-weight: bold;
    color: inherit;
}

.stTabs [data-baseweb="tab-list"] {
    gap: 3px;
    margin-bottom: 1rem;
}

.stTabs [data-baseweb="tab-list"] button {
    height: 50px;
    white-space: pre-wrap;
    border-radius: 8px 8px 0px 0px;
    gap: 4px;
    padding: 10px 16px;
    border: 2px solid transparent;
    transition: all 0.3s ease;
    font-weight: 600;
}

/* –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ */
@media (prefers-color-scheme: light) {
    .stTabs [data-baseweb="tab-list"] button {
        background-color: #f8f9fa;
        color: #495057;
        border-color: #dee2e6;
    }
    
    .stTabs [data-baseweb="tab-list"] button:hover {
        background-color: #e9ecef;
        color: #212529;
        border-color: #adb5bd;
    }
    
    .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] {
        background-color: #ff4b4b;
        color: white;
        border-color: #ff4b4b;
        box-shadow: 0 4px 8px rgba(255, 75, 75, 0.3);
    }
}

/* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ */
@media (prefers-color-scheme: dark) {
    .stTabs [data-baseweb="tab-list"] button {
        background-color: #2d3748;
        color: #e2e8f0;
        border-color: #4a5568;
    }
    
    .stTabs [data-baseweb="tab-list"] button:hover {
        background-color: #4a5568;
        color: #f7fafc;
        border-color: #718096;
    }
    
    .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] {
        background-color: #ff4b4b;
        color: white;
        border-color: #ff4b4b;
        box-shadow: 0 4px 8px rgba(255, 75, 75, 0.4);
    }
}

/* –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã Streamlit */
[data-theme="dark"] .stTabs [data-baseweb="tab-list"] button {
    background-color: #2d3748 !important;
    color: #e2e8f0 !important;
    border-color: #4a5568 !important;
}

[data-theme="dark"] .stTabs [data-baseweb="tab-list"] button:hover {
    background-color: #4a5568 !important;
    color: #f7fafc !important;
    border-color: #718096 !important;
}

[data-theme="dark"] .stTabs [data-baseweb="tab-list"] button[aria-selected="true"] {
    background-color: #ff4b4b !important;
    color: white !important;
    border-color: #ff4b4b !important;
    box-shadow: 0 4px 8px rgba(255, 75, 75, 0.4) !important;
}

/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Å–≤–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ */
.stTabs [data-baseweb="tab-list"] button {
    opacity: 0.9;
}

.stTabs [data-baseweb="tab-list"] button[aria-selected="true"] {
    opacity: 1;
}
</style>
""", unsafe_allow_html=True)

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

# –í–∫–ª–∞–¥–∫–∞ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä –ø–∞—Ä
with tab1:
    st.header("üíº –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    st.subheader("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    col_status1, col_status2, col_status3 = st.columns(3)
    
    with col_status1:
        if api_key and api_secret:
            st.success("üîë API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            st.error("üîë API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    with col_status2:
        st.success("üìã Binance API –∞–∫—Ç–∏–≤–µ–Ω")
    
    with col_status3:
        if st.session_state.api_keys_saved:
            st.success("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        else:
            st.info("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    st.markdown("---")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ —Å –ø–æ–ª–∑—É–Ω–∫–∞–º–∏
    st.subheader("ÔøΩ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ä")
    
    col_a, col_b = st.columns(2)
    
    with col_a:
        min_volume_slider = st.slider(
            "–ú–∏–Ω. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (–º–ª–Ω USDT)", 
            min_value=1, 
            max_value=1000, 
            value=10,
            step=1,
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏–æ–Ω–∞—Ö USDT"
        )
        min_volume_calc = min_volume_slider * 1000000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USDT
        
        min_price_slider = st.slider(
            "–ú–∏–Ω. —Ü–µ–Ω–∞ (USDT)", 
            min_value=0.0001, 
            max_value=10.0, 
            value=0.01,
            step=0.0001,
            format="%.4f",
            help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
        )
        
    with col_b:
        max_price_slider = st.slider(
            "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (USDT)", 
            min_value=1.0, 
            max_value=10000.0, 
            value=100.0,
            step=1.0,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
        )
        
        max_pairs_slider = st.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
            min_value=5, 
            max_value=100, 
            value=30,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        )
    
    st.markdown("---")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä –∏–∑ Binance
    st.subheader("üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
    
    if api_key and api_secret:
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä —Å Binance..."):
            try:
                collector = BinanceDataCollector(api_key, api_secret)
                processor = DataProcessor(collector)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã –Ω–∞–ø—Ä—è–º—É—é —Å Binance
                all_pairs = collector.get_all_usdt_pairs()
                filtered_pairs = processor.filter_pairs_by_volume_and_price(
                    all_pairs, 
                    min_volume=min_volume_calc, 
                    min_price=min_price_slider, 
                    max_price=max_price_slider
                )
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ø–∞—Ä
                display_pairs = filtered_pairs[:max_pairs_slider]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
                st.session_state.filtered_pairs = display_pairs
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                col_info1, col_info2, col_info3 = st.columns(3)
                
                with col_info1:
                    st.metric("–í—Å–µ–≥–æ –ø–∞—Ä USDT", len(all_pairs))
                with col_info2:
                    st.metric("–ü—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä", len(filtered_pairs))
                with col_info3:
                    st.metric("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ", len(display_pairs))
                
                pairs_df = pd.DataFrame({
                    '–°–∏–º–≤–æ–ª': display_pairs,
                    '–°—Ç–∞—Ç—É—Å': ['‚úÖ –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É'] * len(display_pairs)
                })
                
                st.dataframe(pairs_df, use_container_width=True)
                
                if len(filtered_pairs) > max_pairs_slider:
                    st.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ {max_pairs_slider} –∏–∑ {len(filtered_pairs)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä. –£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞—Ä: {e}")
                st.session_state.filtered_pairs = []
    else:
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
        st.session_state.filtered_pairs = []

# –í–∫–ª–∞–¥–∫–∞ 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
with tab2:
    st.header("üîç –§–∏–ª—å—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
    
# –í—Å–µ —Å—Ç–∞—Ä—ã–µ –≤–∫–ª–∞–¥–∫–∏ —É–¥–∞–ª–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ 4 –≤–∫–ª–∞–¥–∫–∏

# –í–∫–ª–∞–¥–∫–∞ 3: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
with tab3:
    st.header("üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    
    st.subheader("üìà –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏ Binance")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Maker –∫–æ–º–∏—Å—Å–∏—è", f"{MAKER_COMMISSION_RATE*100:.3f}%", help="–ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
    with col2:
        st.metric("Taker –∫–æ–º–∏—Å—Å–∏—è", f"{TAKER_COMMISSION_RATE*100:.3f}%", help="–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤")
    
    st.markdown("---")
    
    st.subheader("üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    features = [
        ("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É –∏ —Ü–µ–Ω–µ"),
        ("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è Grid Trading", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏"),
        ("‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 15m, 1h, 4h, 1d –¥–∞–Ω–Ω—ã—Ö"),
        ("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞", "–†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"),
        ("‚úÖ –ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"),
        ("‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –ø–∞—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    ]
    
    for emoji_title, description in features:
        with st.container():
            st.write(f"**{emoji_title}**")
            st.write(f"   {description}")
    
    st.markdown("---")
    
    st.subheader("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    with st.expander("–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"):
        st.write("""
        1. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏** –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ (–ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ Binance)
        2. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –≤ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        3. **–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã** –≤ —Ç–æ–π –∂–µ –≤–∫–ª–∞–¥–∫–µ
        4. **–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ Grid Trading** –≤–æ –≤–∫–ª–∞–¥–∫–µ "Grid Trading"
        5. **–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
        """)
    
    with st.expander("–û Grid Trading"):
        st.write("""
        Grid Trading (—Å–µ—Ç–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è) - —ç—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏ –ø—Ä–æ–¥–∞–∂—É 
        —á–µ—Ä–µ–∑ —Ä–∞–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ü–µ–Ω—ã –≤–æ–∫—Ä—É–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã, —Å–æ–∑–¥–∞–≤–∞—è "—Å–µ—Ç–∫—É" –æ—Ä–¥–µ—Ä–æ–≤.
        
        **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
        - –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω–æ–π –≤ –±–æ–∫–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö
        - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é
        - –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–±—ã–ª—å –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        
        **–†–∏—Å–∫–∏:**
        - –ú–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —É–±—ã—Ç–∫–∞–º –≤ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö
        - –¢—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
        - –ö–æ–º–∏—Å—Å–∏–∏ –º–æ–≥—É—Ç —Å—ä–µ–¥–∞—Ç—å –ø—Ä–∏–±—ã–ª—å
        """)

# –í–∫–ª–∞–¥–∫–∞ 3: Grid Trading (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
with tab3:
    st.header("‚ö° –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if st.session_state.transfer_params is not None:
        transferred = st.session_state.transfer_params
        st.success(f"""
        üéØ **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑:** {transferred['source']}
        
        ‚Ä¢ **–ü–∞—Ä–∞**: {transferred['pair']}
        ‚Ä¢ **–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏**: {transferred['grid_range_pct']:.1f}%
        ‚Ä¢ **–®–∞–≥ —Å–µ—Ç–∫–∏**: {transferred['grid_step_pct']:.2f}%
        ‚Ä¢ **–°—Ç–æ–ø-–ª–æ—Å—Å**: {transferred['stop_loss_pct']:.1f}%
        ‚Ä¢ **–ë–∞–ª–∞–Ω—Å**: {transferred['initial_balance']} USDT
        ‚Ä¢ **–¢–∞–π–º—Ñ—Ä–µ–π–º**: {transferred['timeframe']}
        ‚Ä¢ **–ü–µ—Ä–∏–æ–¥**: {transferred['simulation_days']} –¥–Ω–µ–π
        """)
        
        col_clear, col_use = st.columns(2)
        with col_clear:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
                st.session_state.transfer_params = None
                st.rerun()
        with col_use:
            if st.button("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", type="primary"):
                st.info("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∂–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏–º—É–ª—è—Ü–∏—é.")
        
        st.markdown("---")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–µ—Ç–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    st.subheader("üéõÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏")
    
    col1, col2, col3 = st.columns(3)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    default_grid_range = st.session_state.transfer_params['grid_range_pct'] if st.session_state.transfer_params else 20.0
    default_grid_step = st.session_state.transfer_params['grid_step_pct'] if st.session_state.transfer_params else 1.0  
    default_balance = st.session_state.transfer_params['initial_balance'] if st.session_state.transfer_params else 1000
    
    with col1:
        grid_range_pct = st.slider(
            "–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏ (%)", 
            min_value=5.0, 
            max_value=50.0, 
            value=float(default_grid_range),
            step=1.0,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–µ—Ç–∫–∏"
        )
    
    with col2:
        grid_step_pct = st.slider(
            "–®–∞–≥ —Å–µ—Ç–∫–∏ (%)", 
            min_value=0.1, 
            max_value=5.0, 
            value=float(default_grid_step),
            step=0.1,
            key="grid_step_slider",
            help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —à–∞–≥ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ —Å–µ—Ç–∫–∏"
        )
        
    with col3:
        initial_balance = st.slider(
            "–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (USDT)",
            min_value=100,
            max_value=50000,
            value=int(default_balance),
            step=100,
            help="–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏"
        )

    st.markdown("---")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
    st.subheader("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    default_days = st.session_state.transfer_params['simulation_days'] if st.session_state.transfer_params else 90
    default_stop_loss = st.session_state.transfer_params['stop_loss_pct'] if st.session_state.transfer_params else 25.0
    default_timeframe = st.session_state.transfer_params['timeframe'] if st.session_state.transfer_params else "1h"
    default_timeframe_index = ["15m", "1h", "4h", "1d"].index(default_timeframe) if default_timeframe in ["15m", "1h", "4h", "1d"] else 1
    
    col_a, col_b, col_c = st.columns(3)
    with col_a:
        simulation_days = st.slider(
            "–°—Ä–æ–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ (–¥–Ω–∏)",
            min_value=7,
            max_value=365,
            value=int(default_days),
            step=1,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏"
        )
    with col_b:
        stop_loss_pct = st.slider(
            "–°—Ç–æ–ø-–ª–æ—Å—Å (%)",
            min_value=0.0,
            max_value=50.0,
            value=float(default_stop_loss),
            step=2.5,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–∞–¥–∫–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏. 0 - –æ—Ç–∫–ª—é—á–∏—Ç—å. –£—Å–∫–æ—Ä—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–æ—Ö–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."
        )
    with col_c:
        timeframe = st.selectbox(
            "–¢–∞–π–º—Ñ—Ä–µ–π–º",
            options=["15m", "1h", "4h", "1d"],
            index=default_timeframe_index,
            help="–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
        )

    # –í—ã–±–æ—Ä –ø–∞—Ä—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä
    if 'filtered_pairs' in st.session_state and st.session_state.filtered_pairs:
        current_pairs_for_grid = st.session_state.filtered_pairs
    else:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –≤–∫–ª–∞–¥–∫–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä")
        current_pairs_for_grid = []
    
    if current_pairs_for_grid:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        default_pair = st.session_state.transfer_params['pair'] if st.session_state.transfer_params else current_pairs_for_grid[0]
        try:
            default_pair_index = current_pairs_for_grid.index(default_pair) if default_pair in current_pairs_for_grid else 0
        except (ValueError, IndexError):
            default_pair_index = 0
            
        selected_pair_for_grid = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏",
            current_pairs_for_grid,
            index=default_pair_index,
            key="selected_pair_for_grid",
            help=f"–î–æ—Å—Ç—É–ø–Ω–æ {len(current_pairs_for_grid)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä"
        )

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Grid Trading
        if (st.session_state.grid_simulation_results is not None and 
            st.session_state.grid_simulation_params is not None):
            st.markdown("---")
            st.subheader("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
            
            saved_results = st.session_state.grid_simulation_results
            saved_params = st.session_state.grid_simulation_params
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç–µ—Å—Ç–µ
            st.info(f"""
            **–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç**: {saved_results['pair']} 
            **–í—Ä–µ–º—è**: {saved_results['timestamp']}
            **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã**: –î–∏–∞–ø–∞–∑–æ–Ω {saved_params['grid_range_pct']}%, –®–∞–≥ {saved_params['grid_step_pct']}%, –°—Ç–æ–ø-–ª–æ—Å—Å {saved_params['stop_loss_pct']}%
            """)
            
            # –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            stats_long = saved_results['stats_long']
            stats_short = saved_results['stats_short']
            total_pnl = stats_long['total_pnl'] + stats_short['total_pnl']
            total_initial_balance = saved_params['initial_balance'] * 2
            total_pnl_pct = (total_pnl / total_initial_balance) * 100 if total_initial_balance > 0 else 0
            total_trades = stats_long['trades_count'] + stats_short['trades_count']
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("PnL", f"${total_pnl:.2f}", f"{total_pnl_pct:.2f}%")
            with col2:
                st.metric("–°–¥–µ–ª–æ–∫", total_trades)
            with col3:
                avg_dd = (stats_long.get('max_drawdown_pct', 0) + stats_short.get('max_drawdown_pct', 0)) / 2
                st.metric("–ú–∞–∫—Å. DD", f"{avg_dd:.2f}%")
            with col4:
                total_stop_loss_triggers = stats_long.get('stop_loss_triggers', 0) + stats_short.get('stop_loss_triggers', 0)
                st.metric("–°—Ç–æ–ø-–ª–æ—Å—Å–æ–≤", total_stop_loss_triggers)
            
            # –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ expander
            with st.expander("üîç –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                # –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫
                total_commission = stats_long['total_commission'] + stats_short['total_commission']
                avg_sharpe = (stats_long.get('sharpe_ratio', 0) + stats_short.get('sharpe_ratio', 0)) / 2
                avg_pf = (stats_long.get('profit_factor', 0) + stats_short.get('profit_factor', 0)) / 2
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                results_data = {
                    "–ú–µ—Ç—Ä–∏–∫–∞": ["–ë–∞–ª–∞–Ω—Å Long", "PnL Long ($)", "PnL Long (%)", "–°–¥–µ–ª–æ–∫ Long", "–ö–æ–º–∏—Å—Å–∏–∏ Long ($)", "–°—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ Long",
                                "–ë–∞–ª–∞–Ω—Å Short", "PnL Short ($)", "PnL Short (%)", "–°–¥–µ–ª–æ–∫ Short", "–ö–æ–º–∏—Å—Å–∏–∏ Short ($)", "–°—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ Short"],
                    "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                        f"${stats_long['final_balance']:.2f}", f"${stats_long['total_pnl']:.2f}", f"{stats_long['total_pnl_pct']:.2f}%", str(stats_long['trades_count']), f"${stats_long['total_commission']:.2f}", str(stats_long.get('stop_loss_triggers', 0)),
                        f"${stats_short['final_balance']:.2f}", f"${stats_short['total_pnl']:.2f}", f"{stats_short['total_pnl_pct']:.2f}%", str(stats_short['trades_count']), f"${stats_short['total_commission']:.2f}", str(stats_short.get('stop_loss_triggers', 0))
                    ]
                }
                results_df = pd.DataFrame(results_data)
                results_df['–ó–Ω–∞—á–µ–Ω–∏–µ'] = results_df['–ó–Ω–∞—á–µ–Ω–∏–µ'].astype(str)
                st.dataframe(results_df, use_container_width=True)
                
                # –õ–æ–≥–∏ —Å–¥–µ–ª–æ–∫
                if saved_results['log_long_df']:
                    st.subheader("–õ–æ–≥ —Å–¥–µ–ª–æ–∫ Long")
                    df_long = pd.DataFrame(saved_results['log_long_df'])
                    st.dataframe(df_long, use_container_width=True)
                
                if saved_results['log_short_df']:
                    st.subheader("–õ–æ–≥ —Å–¥–µ–ª–æ–∫ Short")
                    df_short = pd.DataFrame(saved_results['log_short_df'])
                    st.dataframe(df_short, use_container_width=True)
            
            st.markdown("---")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        col_btn1, col_btn2 = st.columns(2)
        
        with col_btn1:
            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã", type="primary"):
                if not saved_api_key or not saved_api_secret:
                    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
                elif not selected_pair_for_grid:
                    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏.")
                else:
                    try:
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                        with st.spinner("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance..."):
                            collector = BinanceDataCollector(saved_api_key, saved_api_secret)
                            grid_analyzer = GridAnalyzer(collector)
                        st.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                        
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                        with st.spinner(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {selected_pair_for_grid}..."):
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π
                            df_for_simulation = collector.get_historical_data(selected_pair_for_grid, timeframe, simulation_days)
                        
                        if df_for_simulation.empty:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏.")
                        else:
                            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            st.info(f"üîß **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏:** –î–∏–∞–ø–∞–∑–æ–Ω {grid_range_pct}%, –®–∞–≥ {grid_step_pct}%, –ë–∞–ª–∞–Ω—Å {initial_balance} USDT, –°—Ç–æ–ø-–ª–æ—Å—Å {stop_loss_pct}%")
                            
                            # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
                            with st.spinner(f"–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è {selected_pair_for_grid}..."):
                                stats_long, stats_short, log_long_df, log_short_df = grid_analyzer.estimate_dual_grid_by_candles_realistic(
                                    df=df_for_simulation,
                                    initial_balance_long=initial_balance,
                                    initial_balance_short=initial_balance,
                                    grid_range_pct=grid_range_pct,
                                    grid_step_pct=grid_step_pct,
                                    order_size_usd_long=0,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
                                    order_size_usd_short=0, # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
                                    commission_pct=TAKER_COMMISSION_RATE * 100,
                                    stop_loss_pct=stop_loss_pct if stop_loss_pct > 0 else None,  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
                                    stop_loss_strategy='reset_grid',  # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ç–∫—É –ø—Ä–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–µ
                                    max_drawdown_pct=None,  # DD —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                                    debug=False
                                )

                            st.success(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –¥–ª—è {selected_pair_for_grid} –∑–∞ {simulation_days} –¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                            
                            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ session_state
                            st.session_state.grid_simulation_results = {
                                'pair': selected_pair_for_grid,
                                'stats_long': stats_long,
                                'stats_short': stats_short,
                                'log_long_df': log_long_df,
                                'log_short_df': log_short_df,
                                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                            }
                            
                            st.session_state.grid_simulation_params = {
                                'grid_range_pct': grid_range_pct,
                                'grid_step_pct': grid_step_pct,
                                'initial_balance': initial_balance,
                                'simulation_days': simulation_days,
                                'stop_loss_pct': stop_loss_pct,
                                'timeframe': timeframe
                            }
                            
                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
                            
                            # –†–∞—Å—á–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            total_pnl = stats_long['total_pnl'] + stats_short['total_pnl']
                            total_initial_balance = initial_balance * 2
                            total_pnl_pct = (total_pnl / total_initial_balance) * 100 if total_initial_balance > 0 else 0
                            total_trades = stats_long['trades_count'] + stats_short['trades_count']
                            total_commission = stats_long['total_commission'] + stats_short['total_commission']
                            
                            # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                            avg_dd = (stats_long.get('max_drawdown_pct', 0) + stats_short.get('max_drawdown_pct', 0)) / 2
                            avg_sharpe = (stats_long.get('sharpe_ratio', 0) + stats_short.get('sharpe_ratio', 0)) / 2
                            avg_pf = (stats_long.get('profit_factor', 0) + stats_short.get('profit_factor', 0)) / 2
                            
                            col_result1, col_result2, col_result3, col_result4, col_result5 = st.columns(5)
                            
                            with col_result1:
                                st.metric("–û–±—â–∏–π PnL", f"${total_pnl:.2f}", f"{total_pnl_pct:.2f}%")
                            with col_result2:
                                st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", total_trades)
                            with col_result3:
                                st.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", f"{avg_dd:.2f}%")
                            with col_result4:
                                st.metric("–ö–æ—ç—Ñ—Ñ. –®–∞—Ä–ø–∞", f"{avg_sharpe:.2f}")
                            with col_result5:
                                total_stop_loss_triggers = stats_long.get('stop_loss_triggers', 0) + stats_short.get('stop_loss_triggers', 0)
                                st.metric("–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å–∞", total_stop_loss_triggers)
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞—Ö
                            if total_stop_loss_triggers > 0:
                                st.warning(f"‚ö†Ô∏è –°–µ—Ç–∫–∞ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–ª–∞—Å—å {total_stop_loss_triggers} —Ä–∞–∑(–∞) –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ {stop_loss_pct}%")
                            
                            # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–æ–π
                            st.info(f"""
                            **üìã –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:**
                            ‚Ä¢ **PnL**: ${total_pnl:.2f} ({total_pnl_pct:.2f}%) 
                            ‚Ä¢ **–°–¥–µ–ª–æ–∫**: {total_trades} | **–ö–æ–º–∏—Å—Å–∏–∏**: ${total_commission:.2f}
                            ‚Ä¢ **DD**: {avg_dd:.2f}% | **Sharpe**: {avg_sharpe:.2f} | **PF**: {avg_pf:.1f}
                            ‚Ä¢ **–°—Ç–æ–ø-–ª–æ—Å—Å–æ–≤**: {total_stop_loss_triggers} ({stats_long.get('stop_loss_triggers', 0)} Long + {stats_short.get('stop_loss_triggers', 0)} Short)
                            """)

                            st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                            
                            results_data = {
                                "–ú–µ—Ç—Ä–∏–∫–∞": ["–ë–∞–ª–∞–Ω—Å Long", "PnL Long ($)", "PnL Long (%)", "–°–¥–µ–ª–æ–∫ Long", "–ö–æ–º–∏—Å—Å–∏–∏ Long ($)", "–°—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ Long",
                                            "–ë–∞–ª–∞–Ω—Å Short", "PnL Short ($)", "PnL Short (%)", "–°–¥–µ–ª–æ–∫ Short", "–ö–æ–º–∏—Å—Å–∏–∏ Short ($)", "–°—Ç–æ–ø-–ª–æ—Å—Å–æ–≤ Short"],
                                "–ó–Ω–∞—á–µ–Ω–∏–µ": [
                                    f"${stats_long['final_balance']:.2f}", f"${stats_long['total_pnl']:.2f}", f"{stats_long['total_pnl_pct']:.2f}%", str(stats_long['trades_count']), f"${stats_long['total_commission']:.2f}", str(stats_long.get('stop_loss_triggers', 0)),
                                    f"${stats_short['final_balance']:.2f}", f"${stats_short['total_pnl']:.2f}", f"{stats_short['total_pnl_pct']:.2f}%", str(stats_short['trades_count']), f"${stats_short['total_commission']:.2f}", str(stats_short.get('stop_loss_triggers', 0))
                                ]
                            }
                            # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ Arrow
                            results_df = pd.DataFrame(results_data)
                            results_df['–ó–Ω–∞—á–µ–Ω–∏–µ'] = results_df['–ó–Ω–∞—á–µ–Ω–∏–µ'].astype(str)
                            st.dataframe(results_df, use_container_width=True)

                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å–¥–µ–ª–æ–∫
                            with st.expander("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–¥–µ–ª–æ–∫"):
                                st.subheader("–õ–æ–≥ —Å–¥–µ–ª–æ–∫ Long")
                                if log_long_df: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                                    df_long = pd.DataFrame(log_long_df)
                                    st.dataframe(df_long, use_container_width=True)
                                else:
                                    st.info("–°–¥–µ–ª–æ–∫ –ø–æ Long –Ω–µ –±—ã–ª–æ.")
                                    
                                st.subheader("–õ–æ–≥ —Å–¥–µ–ª–æ–∫ Short")
                                if log_short_df: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                                    df_short = pd.DataFrame(log_short_df)
                                    st.dataframe(df_short, use_container_width=True)
                                else:
                                    st.info("–°–¥–µ–ª–æ–∫ –ø–æ Short –Ω–µ –±—ã–ª–æ.")

                    except Exception as e:
                        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
                        st.exception(e)
        
        with col_btn2:
            if st.session_state.grid_simulation_results is not None:
                if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", key="clear_grid_results"):
                    st.session_state.grid_simulation_results = None
                    st.session_state.grid_simulation_params = None
                    st.rerun()
    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –≤ –≤–∫–ª–∞–¥–∫–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'")

# –í–∫–ª–∞–¥–∫–∞ 4: –ê–≤—Ç–æ-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
with tab4:
    st.header("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    st.markdown("""
    **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
    - –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –Ω–∞ –±—ç–∫—Ç–µ—Å—Ç (70%) –∏ —Ñ–æ—Ä–≤–∞—Ä–¥ —Ç–µ—Å—Ç (30%)
    - –ê–ª–≥–æ—Ä–∏—Ç–º –∏—â–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ–±–µ–∏—Ö —á–∞—Å—Ç—è—Ö
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –∏–ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–µ—Ç–∫–µ
    - –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    """)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –∏–∑ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
        if 'filtered_pairs' in st.session_state and st.session_state.filtered_pairs:
            current_pairs_for_opt = st.session_state.filtered_pairs
        else:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –≤–∫–ª–∞–¥–∫–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä")
            current_pairs_for_opt = []
        
        if current_pairs_for_opt:
            opt_pair = st.selectbox(
                "–ü–∞—Ä–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
                current_pairs_for_opt,
                key="opt_pair",
                help=f"–î–æ—Å—Ç—É–ø–Ω–æ {len(current_pairs_for_opt)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä"
            )
        else:
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –≤ –≤–∫–ª–∞–¥–∫–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'")
            opt_pair = None
        
        opt_balance = st.slider(
            "–ë–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (USDT)",
            min_value=100,
            max_value=10000,
            value=1000,
            step=100,
            help="–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
        )
    
    with col2:
        opt_timeframe = st.selectbox(
            "–¢–∞–π–º—Ñ—Ä–µ–π–º",
            options=["15m", "1h", "4h", "1d"],
            index=1,
            key="opt_timeframe"
        )
        
        opt_days = st.slider(
            "–î–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏",
            min_value=30,
            max_value=365,
            value=180,
            help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö"
        )
    
    with col3:
        opt_method = st.selectbox(
            "–ú–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
            options=["–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫"],
            help="–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π - –ª—É—á—à–µ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π - –±—ã—Å—Ç—Ä–µ–µ"
        )
        
        max_workers = st.slider(
            "–ü–æ—Ç–æ–∫–æ–≤",
            min_value=1,
            max_value=8,
            value=4,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"
        )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
    st.subheader("üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    population_size = 50
    generations = 20
    iterations = 3
    points_per_iteration = 50
    
    if opt_method == "–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º":
        col_a, col_b = st.columns(2)
        with col_a:
            population_size = st.slider("–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏", 20, 100, 50)
        with col_b:
            generations = st.slider("–ü–æ–∫–æ–ª–µ–Ω–∏–π", 10, 50, 20)
    else:
        col_a, col_b = st.columns(2)
        with col_a:
            iterations = st.slider("–ò—Ç–µ—Ä–∞—Ü–∏–π", 2, 5, 3)
        with col_b:
            points_per_iteration = st.slider("–¢–æ—á–µ–∫ –∑–∞ –∏—Ç–µ—Ä–∞—Ü–∏—é", 20, 100, 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    st.subheader("üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    col_risk1, col_risk2 = st.columns(2)
    
    with col_risk1:
        forward_test_pct = st.slider(
            "–§–æ—Ä–≤–∞—Ä–¥ —Ç–µ—Å—Ç (%)",
            min_value=0.2,
            max_value=0.5,
            value=0.3,
            step=0.05,
            help="–ü—Ä–æ—Ü–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–≤–∞—Ä–¥ —Ç–µ—Å—Ç–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)"
        )
    
    with col_risk2:
        st.info("""
        **–¢–æ–ª—å–∫–æ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å**
        
        Drawdown –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
        """)
    
    st.markdown("---")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if (st.session_state.optimization_results is not None and 
        st.session_state.optimization_params is not None):
        st.subheader("üéØ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        opt_params = st.session_state.optimization_params
        opt_results = st.session_state.optimization_results
        best_result = st.session_state.optimization_best_result
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        st.info(f"""
        **–ü–∞—Ä–∞**: {opt_params['pair']} | **–ú–µ—Ç–æ–¥**: {opt_params['method']}  
        **–í—Ä–µ–º—è**: {opt_params['timestamp']} | **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: {opt_params['duration_seconds']:.1f}—Å
        **–ù–∞–π–¥–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤**: {len(opt_results)} | **–î–∞–Ω–Ω—ã–µ**: {opt_params['days']} –¥–Ω–µ–π, {opt_params['timeframe']}
        """)
        
        if best_result:
            # –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–õ—É—á—à–∏–π —Å–∫–æ—Ä", f"{best_result.combined_score:.2f}%")
            with col2:
                st.metric("–ë—ç–∫—Ç–µ—Å—Ç / –§–æ—Ä–≤–∞—Ä–¥", f"{best_result.backtest_score:.2f}% / {best_result.forward_score:.2f}%")
            with col3:
                st.metric("Drawdown", f"{best_result.max_drawdown_pct:.2f}%")
            with col4:
                st.metric("Sharpe", f"{best_result.sharpe_ratio:.2f}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.success(f"""
            **üèÜ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
            ‚Ä¢ **–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏**: {best_result.params.grid_range_pct:.1f}%
            ‚Ä¢ **–®–∞–≥ —Å–µ—Ç–∫–∏**: {best_result.params.grid_step_pct:.2f}%  
            ‚Ä¢ **–°—Ç–æ–ø-–ª–æ—Å—Å**: {best_result.params.stop_loss_pct:.1f}%
            ‚Ä¢ **–°–¥–µ–ª–æ–∫**: {best_result.trades_count} | **PF**: {best_result.profit_factor:.1f}
            """)
            
            # –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ expander
            with st.expander("üîç –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
                top_5 = opt_results[:5]
                results_data = []
                
                for i, result in enumerate(top_5):
                    stability = abs(result.backtest_score - result.forward_score)
                    dd_pct = result.max_drawdown_pct
                    sharpe = result.sharpe_ratio
                    
                    if dd_pct < 10 and sharpe > 1.0 and stability < 5:
                        quality_indicator = "üü¢"
                    elif dd_pct < 20 and sharpe > 0.5 and stability < 10:
                        quality_indicator = "üü°"
                    else:
                        quality_indicator = "üî¥"
                    
                    results_data.append({
                        '–†–∞–Ω–≥': f"{quality_indicator} {i + 1}",
                        '–°–∫–æ—Ä (%)': f"{result.combined_score:.2f}",
                        '–ë—ç–∫—Ç–µ—Å—Ç (%)': f"{result.backtest_score:.2f}",
                        '–§–æ—Ä–≤–∞—Ä–¥ (%)': f"{result.forward_score:.2f}",
                        'DD (%)': f"{result.max_drawdown_pct:.2f}",
                        'Sharpe': f"{result.sharpe_ratio:.2f}",
                        '–î–∏–∞–ø–∞–∑–æ–Ω (%)': f"{result.params.grid_range_pct:.1f}",
                        '–®–∞–≥ (%)': f"{result.params.grid_step_pct:.2f}",
                        '–°—Ç–æ–ø-–ª–æ—Å—Å (%)': f"{result.params.stop_loss_pct:.1f}"
                    })
                
                results_df = pd.DataFrame(results_data)
                st.dataframe(results_df, use_container_width=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–¢–µ—Å—Ç" –¥–ª—è —Ç–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.write("**–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:**")
                cols = st.columns(5)
                for i, result in enumerate(top_5):
                    with cols[i]:
                        rank = i + 1
                        if st.button(f"üß™ #{rank}", key=f"test_top5_btn_{i}"):
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
                            st.session_state.transfer_params = {
                                'pair': st.session_state.optimization_params['pair'],
                                'grid_range_pct': result.params.grid_range_pct,
                                'grid_step_pct': result.params.grid_step_pct,
                                'stop_loss_pct': result.params.stop_loss_pct,
                                'initial_balance': st.session_state.optimization_params['balance'],
                                'timeframe': st.session_state.optimization_params['timeframe'],
                                'simulation_days': st.session_state.optimization_params['days'],
                                'source': f"–¢–æ–ø-5 #{rank} (—Å–∫–æ—Ä: {result.combined_score:.2f}%)"
                            }
                            st.success(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã #{rank} –≥–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç—É!")
                            
            # –ö–Ω–æ–ø–∫–∞ "–¢–µ—Å—Ç" –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if st.button("üèÜ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", type="primary"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
                st.session_state.transfer_params = {
                    'pair': st.session_state.optimization_params['pair'],
                    'grid_range_pct': best_result.params.grid_range_pct,
                    'grid_step_pct': best_result.params.grid_step_pct,
                    'stop_loss_pct': best_result.params.stop_loss_pct,
                    'initial_balance': st.session_state.optimization_params['balance'],
                    'timeframe': st.session_state.optimization_params['timeframe'],
                    'simulation_days': st.session_state.optimization_params['days'],
                    'source': f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å–∫–æ—Ä: {best_result.combined_score:.2f}%)"
                }
                st.success("üèÜ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ—Ç–æ–≤—ã! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É Grid Trading –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                st.balloons()
        
        st.markdown("---")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    col_opt1, col_opt2 = st.columns(2)
    
    with col_opt1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é", type="primary", key="start_optimization"):
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å API –∫–ª—é—á–∞–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
            if not api_key or not api_secret:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
            elif not opt_pair:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞—Ä—ã –≤ –≤–∫–ª–∞–¥–∫–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'.")
            else:
                try:
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏
                    status_text.text("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
                    collector = BinanceDataCollector(api_key, api_secret)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–∏ –∏–∑ sidebar
                    grid_analyzer = GridAnalyzer(collector)
                    optimizer = GridOptimizer(grid_analyzer, TAKER_COMMISSION_RATE)
                    
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    status_text.text(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {opt_pair}...")
                    progress_bar.progress(10)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π
                    df_opt = collector.get_historical_data(opt_pair, opt_timeframe, opt_days)
                    
                    if df_opt.empty:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.")
                        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        st.session_state.optimization_results = None
                        st.session_state.optimization_params = None
                        st.session_state.optimization_best_result = None
                    else:
                        progress_bar.progress(20)
                        
                        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ)
                        def progress_callback(message):
                            status_text.text(message)
                        
                        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ)
                        start_time = time.time()
                        
                        # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
                        if opt_method == "–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º":
                            status_text.text("–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞...")
                            progress_bar.progress(30)
                            
                            results = optimizer.optimize_genetic(
                                df=df_opt,
                                initial_balance=opt_balance,
                                population_size=population_size,
                                generations=generations,
                                forward_test_pct=forward_test_pct,
                                max_workers=max_workers,
                                progress_callback=progress_callback
                            )
                        else:
                            status_text.text("–ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
                            progress_bar.progress(30)
                            
                            results = optimizer.grid_search_adaptive(
                                df=df_opt,
                                initial_balance=opt_balance,
                                forward_test_pct=forward_test_pct,
                                iterations=iterations,
                                points_per_iteration=points_per_iteration,
                                progress_callback=progress_callback
                            )
                        
                        end_time = time.time()
                        progress_bar.progress(100)
                        status_text.text(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.1f} —Å–µ–∫—É–Ω–¥")
                        
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ session_state
                        st.session_state.optimization_results = results
                        st.session_state.optimization_params = {
                            'pair': opt_pair,
                            'balance': opt_balance,
                            'timeframe': opt_timeframe,
                            'days': opt_days,
                            'method': opt_method,
                            'forward_test_pct': forward_test_pct,
                            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                            'duration_seconds': end_time - start_time
                        }
                        if results:
                            st.session_state.optimization_best_result = results[0]
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!")
                        
                        # –¢–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        st.subheader("üèÜ –¢–æ–ø-10 –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                        
                        top_results = results[:10]
                        results_data = []
                        
                        for i, result in enumerate(top_results):
                            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
                            stability = abs(result.backtest_score - result.forward_score)
                            dd_pct = result.max_drawdown_pct
                            sharpe = result.sharpe_ratio
                            
                            if dd_pct < 10 and sharpe > 1.0 and stability < 5:
                                quality_indicator = "üü¢"
                            elif dd_pct < 20 and sharpe > 0.5 and stability < 10:
                                quality_indicator = "üü°"
                            else:
                                quality_indicator = "üî¥"
                            
                            results_data.append({
                                '–†–∞–Ω–≥': f"{quality_indicator} {i + 1}",
                                '–û–±—â–∏–π —Å–∫–æ—Ä (%)': f"{result.combined_score:.2f}",
                                '–ë—ç–∫—Ç–µ—Å—Ç (%)': f"{result.backtest_score:.2f}",
                                '–§–æ—Ä–≤–∞—Ä–¥ (%)': f"{result.forward_score:.2f}",
                                'DD (%)': f"{result.max_drawdown_pct:.2f}",
                                'Sharpe': f"{result.sharpe_ratio:.2f}",
                                'PF': f"{result.profit_factor:.1f}",
                                '–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏ (%)': f"{result.params.grid_range_pct:.1f}",
                                '–®–∞–≥ —Å–µ—Ç–∫–∏ (%)': f"{result.params.grid_step_pct:.2f}",
                                '–°—Ç–æ–ø-–ª–æ—Å—Å (%)': f"{result.params.stop_loss_pct:.1f}",
                                '–°–¥–µ–ª–æ–∫': result.trades_count
                            })
                        
                        results_df = pd.DataFrame(results_data)
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–¢–µ—Å—Ç"
                        st.dataframe(results_df, use_container_width=True)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–¢–µ—Å—Ç" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        st.subheader("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                        st.write("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–¢–µ—Å—Ç' –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ –≤–∫–ª–∞–¥–∫—É Grid Trading:")
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                        cols_per_row = 5
                        for i in range(0, min(10, len(top_results)), cols_per_row):
                            cols = st.columns(cols_per_row)
                            for j in range(cols_per_row):
                                idx = i + j
                                if idx < len(top_results):
                                    result = top_results[idx]
                                    with cols[j]:
                                        rank = idx + 1
                                        if st.button(f"üß™ –¢–µ—Å—Ç #{rank}", key=f"test_btn_{idx}"):
                                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
                                            st.session_state.transfer_params = {
                                                'pair': st.session_state.optimization_params['pair'],
                                                'grid_range_pct': result.params.grid_range_pct,
                                                'grid_step_pct': result.params.grid_step_pct,
                                                'stop_loss_pct': result.params.stop_loss_pct,
                                                'initial_balance': st.session_state.optimization_params['balance'],
                                                'timeframe': st.session_state.optimization_params['timeframe'],
                                                'simulation_days': st.session_state.optimization_params['days'],
                                                'source': f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è #{rank} (—Å–∫–æ—Ä: {result.combined_score:.2f}%)"
                                            }
                                            st.success(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã #{rank} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É Grid Trading –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                                            st.balloons()
                        
                        # –ü–æ—è—Å–Ω–µ–Ω–∏—è –∫ –Ω–æ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
                        with st.expander("üìö –ü–æ—è—Å–Ω–µ–Ω–∏—è –∫ –º–µ—Ç—Ä–∏–∫–∞–º"):
                            st.markdown("""
                            **–ù–æ–≤—ã–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**
                            - **DD (%)** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (Draw Down) 
                            - **Sharpe** - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (–æ—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞)
                            - **PF** - Profit Factor (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—É–º–º—ã –ø—Ä–∏–±—ã–ª–∏ –∫ —Å—É–º–º–µ —É–±—ã—Ç–∫–æ–≤)
                            
                            **–¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞:**
                            - üü¢ **–ó–µ–ª–µ–Ω—ã–π**: –û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (DD<10%, Sharpe>1.0, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å<5%)
                            - üü° **–ñ–µ–ª—Ç—ã–π**: –•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (DD<20%, Sharpe>0.5, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å<10%)  
                            - üî¥ **–ö—Ä–∞—Å–Ω—ã–π**: –ü–ª–æ—Ö–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (DD>20%, Sharpe<0.5, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å>10%)
                            """)
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—É—á—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                        if results:
                            best_result = results[0]
                            st.subheader("ü•á –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                            
                            # 4 –∫–æ–ª–æ–Ω–∫–∏ –º–µ—Ç—Ä–∏–∫ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤ –æ—Ç—á–µ—Ç–µ
                            col_info1, col_info2, col_info3, col_info4 = st.columns(4)
                            
                            with col_info1:
                                st.metric("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä", f"{best_result.combined_score:.2f}%")
                                st.metric("–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏", f"{best_result.params.grid_range_pct:.1f}%")
                            
                            with col_info2:
                                st.metric("–ë—ç–∫—Ç–µ—Å—Ç vs –§–æ—Ä–≤–∞—Ä–¥", 
                                        f"{best_result.backtest_score:.2f}% vs {best_result.forward_score:.2f}%")
                                st.metric("–®–∞–≥ —Å–µ—Ç–∫–∏", f"{best_result.params.grid_step_pct:.2f}%")
                            
                            with col_info3:
                                st.metric("–ü—Ä–æ—Å–∞–¥–∫–∞", f"{best_result.max_drawdown_pct:.2f}%")
                                st.metric("–ö–æ—ç—Ñ—Ñ. –®–∞—Ä–ø–∞", f"{best_result.sharpe_ratio:.2f}")
                            
                            with col_info4:
                                st.metric("Profit Factor", f"{best_result.profit_factor:.1f}")
                                st.metric("–°—Ç–æ–ø-–ª–æ—Å—Å", f"{best_result.params.stop_loss_pct:.1f}%")
                            
                            # –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Å—Ç–∏–ª–µ –æ—Ç—á–µ—Ç–∞
                            st.info(f"""
                            ‚Ä¢ **–û–±—â–∏–π —Å–∫–æ—Ä**: {best_result.combined_score:.2f}%
                            ‚Ä¢ **–ë—ç–∫—Ç–µ—Å—Ç**: {best_result.backtest_score:.2f}%  
                            ‚Ä¢ **–§–æ—Ä–≤–∞—Ä–¥**: {best_result.forward_score:.2f}%
                            ‚Ä¢ **DD**: {best_result.max_drawdown_pct:.2f}% | **Sharpe**: {best_result.sharpe_ratio:.2f}
                            ‚Ä¢ **PF**: {best_result.profit_factor:.1f} | **–°–¥–µ–ª–æ–∫**: {best_result.trades_count}
                            """)
                            
                            # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                            stability = abs(best_result.backtest_score - best_result.forward_score)
                            dd_pct = best_result.max_drawdown_pct
                            sharpe = best_result.sharpe_ratio
                            
                            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ç—á–µ—Ç—É
                            if dd_pct < 10 and sharpe > 1.0 and stability < 5:
                                st.success(f"üü¢ **–û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**: DD<10%, Sharpe>1.0, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å<5%")
                            elif dd_pct < 20 and sharpe > 0.5 and stability < 10:
                                st.warning(f"üü° **–•–æ—Ä–æ—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏**: DD<20%, Sharpe>0.5, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å<10%")
                            else:
                                st.error(f"üî¥ **–¢—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏**: DD={dd_pct:.1f}%, Sharpe={sharpe:.2f}, –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å={stability:.1f}%")
                            
                            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                            st.subheader("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                            
                            if st.button("üî¨ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                                with st.spinner("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."):
                                    test_stats_long, test_stats_short, test_log_long, test_log_short = grid_analyzer.estimate_dual_grid_by_candles_realistic(
                                        df=df_opt,
                                        initial_balance_long=opt_balance,
                                        initial_balance_short=opt_balance,
                                        grid_range_pct=best_result.params.grid_range_pct,
                                        grid_step_pct=best_result.params.grid_step_pct,
                                        order_size_usd_long=0,
                                        order_size_usd_short=0,
                                        commission_pct=TAKER_COMMISSION_RATE * 100,
                                        stop_loss_pct=best_result.params.stop_loss_pct if best_result.params.stop_loss_pct > 0 else None,
                                        max_drawdown_pct=None,  # –ù–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º DD
                                        debug=False
                                    )
                                    
                                    total_pnl = test_stats_long['total_pnl'] + test_stats_short['total_pnl']
                                    total_pnl_pct = (total_pnl / (opt_balance * 2)) * 100
                                    
                                    st.success("‚úÖ –¢–µ—Å—Ç –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
                                    st.metric("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", f"{total_pnl_pct:.2f}%", f"${total_pnl:.2f}")
                                
                                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                                expected_avg = (best_result.backtest_score + best_result.forward_score) / 2
                                difference = total_pnl_pct - expected_avg
                                st.info(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ: {difference:.2f}%")
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
                    st.exception(e)
    
    with col_opt2:
        if st.session_state.optimization_results is not None:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", key="clear_opt_results"):
                st.session_state.optimization_results = None
                st.session_state.optimization_params = None
                st.session_state.optimization_best_result = None
                st.rerun()

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ - —Ç–µ–ø–µ—Ä—å –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–∫–ª–∞–¥–∫–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
