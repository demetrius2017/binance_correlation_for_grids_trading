"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit.
"""

import os
import time
import json
from datetime import datetime
from typing import List, Dict, Any, Tuple

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import plotly.graph_objects as go

from modules.collector import BinanceDataCollector
from modules.processor import DataProcessor
from modules.correlation import CorrelationAnalyzer
from modules.portfolio import PortfolioBuilder
from modules.grid_analyzer import GridAnalyzer, MAKER_COMMISSION_RATE, TAKER_COMMISSION_RATE


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π Binance",
    page_icon="üìä",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
if 'api_key' not in st.session_state:
    st.session_state.api_key = ""
if 'api_secret' not in st.session_state:
    st.session_state.api_secret = ""


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π
def save_api_keys(api_key: str, api_secret: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç API –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª config.json"""
    config = {
        "api_key": api_key,
        "api_secret": api_secret
    }
    with open("config.json", "w") as f:
        json.dump(config, f)
    print("API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config.json")

def load_api_keys() -> Tuple[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ config.json"""
    try:
        if os.path.exists("config.json"):
            with open("config.json", "r") as f:
                config = json.load(f)
            return config.get("api_key", ""), config.get("api_secret", "")
        return "", ""
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ API –∫–ª—é—á–µ–π: {e}")
        return "", ""


# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
    saved_api_key, saved_api_secret = load_api_keys()
    
    api_key = st.text_input(
        "API Key", 
        value=saved_api_key,
        type="password", 
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç Binance"
    )
    api_secret = st.text_input(
        "API Secret", 
        value=saved_api_secret,
        type="password", 
        help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç Binance"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏"):
        if api_key and api_secret:
            save_api_keys(api_key, api_secret)
            st.success("API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            st.error("–í–≤–µ–¥–∏—Ç–µ –æ–±–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    st.markdown("---")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    min_volume = st.number_input(
        "–ú–∏–Ω. –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ (USDT)", 
        min_value=1000000, 
        max_value=1000000000, 
        value=10000000,
        step=1000000,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞"
    )
    
    min_price = st.number_input(
        "–ú–∏–Ω. —Ü–µ–Ω–∞ (USDT)", 
        min_value=0.0001, 
        max_value=100.0, 
        value=0.01,
        step=0.01,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
    )
    
    max_price = st.number_input(
        "–ú–∞–∫—Å. —Ü–µ–Ω–∞ (USDT)", 
        min_value=1.0, 
        max_value=10000.0, 
        value=100.0,
        step=10.0,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞"
    )
    
    max_pairs = st.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
        min_value=5, 
        max_value=100, 
        value=30,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–µ—Ç–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Grid Trading")
    
    grid_range_pct = st.slider(
        "–î–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ç–∫–∏ (%)", 
        min_value=5.0, 
        max_value=50.0, 
        value=20.0,
        step=1.0,
        help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–µ—Ç–∫–∏"
    )
    
    grid_step_pct = st.slider(
        "–®–∞–≥ —Å–µ—Ç–∫–∏ (%)", 
        min_value=0.1, 
        max_value=5.0, 
        value=1.0,
        step=0.1,
        help="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —à–∞–≥ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ —Å–µ—Ç–∫–∏"
    )

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
start_analysis = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
log_container = st.container()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
collector = None
grid_analyzer = None
correlation_analyzer = None
portfolio_builder = None
data = {}
symbols = []
results_df = pd.DataFrame()
correlation_matrix = pd.DataFrame()

def initialize_components():
    global collector, grid_analyzer, correlation_analyzer, portfolio_builder
    if not api_key or not api_secret:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á–∏ Binance")
        return False
    
    try:
        collector = BinanceDataCollector(api_key, api_secret)
        grid_analyzer = GridAnalyzer(collector)
        correlation_analyzer = CorrelationAnalyzer(collector)
        portfolio_builder = PortfolioBuilder(collector, correlation_analyzer)
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {str(e)}")
        return False

def run_analysis():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    global data, symbols, results_df, correlation_matrix
    
    try:
        if not initialize_components():
            return
        
        with log_container:
            st.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."):
                collector = BinanceDataCollector(api_key, api_secret)
                grid_analyzer = GridAnalyzer(collector)
                correlation_analyzer = CorrelationAnalyzer(collector)
                portfolio_builder = PortfolioBuilder(collector, correlation_analyzer)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            data = {}
            symbols = []
            results_df = pd.DataFrame()
            correlation_matrix = pd.DataFrame()
              # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
            with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä..."):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
                popular_pairs = [
                    "BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "XRPUSDT",
                    "LINKUSDT", "DOTUSDT", "LTCUSDT", "UNIUSDT", "SOLUSDT",
                    "MATICUSDT", "ICXUSDT", "VETUSDT", "XLMUSDT", "TRXUSDT"
                ]
                pairs = popular_pairs[:max_pairs]
                st.success(f"–í—ã–±—Ä–∞–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä –†–µ–π—Ç–∏–Ω–≥ –ø–∞—Ä", 
            "üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", 
            "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", 
            "üìà –ì—Ä–∞—Ñ–∏–∫–∏",
            "‚ö° Grid Trading"
        ])
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –†–µ–π—Ç–∏–Ω–≥ –ø–∞—Ä
        with tab1:
            st.header("–†–µ–π—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—ã..."):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                data = {}
                symbols = []
                
                for symbol in pairs:
                    df = collector.get_historical_data(symbol, "1d", 30)
                    if not df.empty:
                        analysis = grid_analyzer.analyze_pair(df)
                        if analysis and analysis.get('total_score', 0) > 0:
                            data[symbol] = analysis
                            symbols.append(symbol)
                
                if data:
                    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    results_df = pd.DataFrame.from_dict(data, orient='index')
                    results_df = results_df.sort_values('total_score', ascending=False)
                    
                    st.subheader("–¢–æ–ø-15 —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    display_df = results_df.head(15).copy()
                    display_df = display_df.round(4)
                    
                    st.dataframe(display_df, use_container_width=True)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    results_df.to_csv("pair_analysis_results.csv")
                    st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ pair_analysis_results.csv")
                else:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—ã")
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        with tab2:
            st.header("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
            
            if 'results_df' in locals() and not results_df.empty:
                top_pairs = results_df.head(15).index.tolist()
                
                with st.spinner("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏..."):
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    price_data = {}
                    for symbol in top_pairs:
                        df = collector.get_historical_data(symbol, "1d", 30)
                        if not df.empty:
                            price_data[symbol] = df['close']
                    
                    if len(price_data) >= 2:
                        correlation_matrix = pd.DataFrame(data=[df['close'] for df in price_data.values()]).corr()
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
                        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
                        fig, ax = plt.subplots(figsize=(12, 10))
                        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, ax=ax)
                        plt.title("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ü–µ–Ω –∞–∫—Ç–∏–≤–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
                        st.pyplot(fig)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        correlation_matrix.to_csv("correlation_matrix.csv")
                        st.success("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ correlation_matrix.csv")
                    else:
                        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –ü–æ—Ä—Ç—Ñ–µ–ª—å        with tab3:
            st.header("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è")
            
            if 'correlation_matrix' in locals():
                with st.spinner("–°—Ç—Ä–æ–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å..."):
                    # –°—Ç—Ä–æ–∏–º –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π
                    portfolio_builder.set_portfolio_symbols(list(correlation_matrix.columns))
                    optimal_portfolio = {
                        symbol: 1.0/len(correlation_matrix.columns) 
                        for symbol in correlation_matrix.columns[:10]
                    }
                      if optimal_portfolio:
                        st.subheader("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
                        
                        portfolio_df = pd.DataFrame([
                            {"–ê–∫—Ç–∏–≤": asset, "–í–µ—Å": f"{weight:.1%}"} 
                            for asset, weight in optimal_portfolio.items()
                        ])
                        
                        st.dataframe(portfolio_df, use_container_width=True)
                        
                        # –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
                        # –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è
                        avg_correlations = []
                        symbols = list(optimal_portfolio.keys())
                        for i in range(len(symbols)):
                            for j in range(i + 1, len(symbols)):
                                avg_correlations.append(correlation_matrix.loc[symbols[i], symbols[j]])
                        avg_correlation = sum(avg_correlations) / len(avg_correlations) if avg_correlations else 0
                        st.metric("–°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è", f"{avg_correlation:.3f}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
                        portfolio_df.to_csv("optimal_portfolio.csv", index=False)
                        st.success("–ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ optimal_portfolio.csv")
                    else:
                        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å")
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –ì—Ä–∞—Ñ–∏–∫–∏
        with tab4:
            st.header("–ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω")
            
            if 'symbols' in locals() and symbols:
                selected_symbol = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", symbols)
                
                try:
                    df = collector.get_historical_data(selected_symbol, "1d", 90)
                    if not df.empty:
                        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã                        fig, ax = plt.subplots(figsize=(12, 6))
                        ax.plot(df.index, df['close'], linewidth=2)
                        ax.set_title(f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã {selected_symbol} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π")
                        ax.set_xlabel("–î–∞—Ç–∞")
                        ax.set_ylabel("–¶–µ–Ω–∞ (USDT)")
                        ax.grid(True, alpha=0.3)
                        st.pyplot(fig)
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–∞
                        if selected_symbol in data:
                            stats = data[selected_symbol]
                            st.subheader(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {selected_symbol}")
                            st.write(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {stats['volatility']:.4f}")
                            st.write(f"–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ${stats['volume_24h']:,.0f}")
                            st.write(f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã: {stats['price_range_percent']:.2f}%")
                            st.write(f"–í –±–æ–∫–æ–≤–∏–∫–µ: {'–î–∞' if stats['is_sideways'] else '–ù–µ—Ç'}")
                            st.write(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['total_score']:.4f}")
                    else:
                        st.warning("–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        
        # –í–∫–ª–∞–¥–∫–∞ 5: Grid Trading
        with tab5:
            show_grid_trading_tab()

    except Exception as e:
        log_container.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
if start_analysis:
    run_analysis()
else:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    st.info(
        """
        ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        
        1. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ API –∫–ª—é—á–∏ Binance –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∂–µ–ª–∞–Ω–∏—é
        3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"
        4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
        
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–∫–ª—é—á–∞—é—Ç:
        - –†–µ–π—Ç–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        - –ú–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É —Ç–æ–ø-–ø–∞—Ä–∞–º–∏
        - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏
        - –ì—Ä–∞—Ñ–∏–∫–∏ —Ü–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä
        - Grid Trading —Å–∏–º—É–ª—è—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∏—Å—Å–∏—è–º–∏
        """
    )

# –§—É—Ç–µ—Ä
st.markdown("---")
st.caption("¬© 2025 –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä Binance")

def show_grid_trading_tab():
    """–í–∫–ª–∞–¥–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–µ—Ç–∫–∏"""
    global grid_analyzer
    
    if not initialize_components():
        return
        
    st.header("–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∫–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        symbol = st.text_input("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)", "BTCUSDT")
        interval = st.selectbox(
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª",
            ["1m", "3m", "5m", "15m", "30m", "1h", "2h", "4h", "6h", "8h", "12h", "1d"]
        )
        
    with col2:
        start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞")
        end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞")
        
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏")
    col3, col4 = st.columns(2)
    
    with col3:
        grid_size = st.number_input("–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ (%)", value=1.0, step=0.1)
        stop_loss = st.number_input("–°—Ç–æ–ø-–ª–æ—Å—Å (%)", value=2.0, step=0.1)
        
    with col4:
        take_profit = st.number_input("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%)", value=1.0, step=0.1)
        max_positions = st.number_input("–ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π", value=3, step=1)
        
    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
        try:
            with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ timestamp
                start_timestamp = int(datetime.combine(start_date, datetime.min.time()).timestamp() * 1000)
                end_timestamp = int(datetime.combine(end_date, datetime.max.time()).timestamp() * 1000)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                historical_data = collector.get_historical_klines(
                    symbol=symbol,
                    interval=interval,
                    start_str=str(start_timestamp),
                    end_str=str(end_timestamp)
                )
                
                if not historical_data:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
                    return
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
                df = pd.DataFrame(
                    historical_data,
                    columns=['timestamp', 'open', 'high', 'low', 'close', 'volume',
                            'close_time', 'quote_volume', 'trades', 'taker_buy_base',
                            'taker_buy_quote', 'ignored']
                )
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                for col in ['open', 'high', 'low', 'close', 'volume']:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–∫—É
                with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Ç–∫–∏..."):
                    results = grid_analyzer.analyze_pair(
                        df=df,
                        grid_size=grid_size / 100,  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é –¥—Ä–æ–±—å
                        take_profit=take_profit / 100,
                        stop_loss=stop_loss / 100,
                        max_positions=int(max_positions)
                    )
                    
                    if results:
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        
                        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                        metrics = {
                            "–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫": results.get('total_trades', 0),
                            "–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫": results.get('profitable_trades', 0),
                            "–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫": results.get('loss_trades', 0),
                            "–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å (%)": round(results.get('total_profit', 0) * 100, 2),
                            "–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É (%)": round(results.get('avg_profit', 0) * 100, 2),
                            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (%)": round(results.get('max_drawdown', 0) * 100, 2)
                        }
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
                        cols = st.columns(3)
                        for i, (metric, value) in enumerate(metrics.items()):
                            with cols[i % 3]:
                                st.metric(metric, value)
                        
                        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∏ —Å–¥–µ–ª–æ–∫
                        if 'price_history' in results and 'trades' in results:
                            fig = go.Figure()
                            
                            # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
                            fig.add_trace(go.Scatter(
                                x=df['timestamp'],
                                y=df['close'],
                                mode='lines',
                                name='–¶–µ–Ω–∞'
                            ))
                            
                            # –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫–∏
                            trades_df = pd.DataFrame(results['trades'])
                            if not trades_df.empty:
                                fig.add_trace(go.Scatter(
                                    x=pd.to_datetime(trades_df['timestamp'], unit='ms'),
                                    y=trades_df['entry_price'],
                                    mode='markers',
                                    name='–í—Ö–æ–¥—ã –≤ –ø–æ–∑–∏—Ü–∏—é',
                                    marker=dict(
                                        size=8,
                                        color='green',
                                        symbol='triangle-up'
                                    )
                                ))
                                
                                # –¢–æ—á–∫–∏ –≤—ã—Ö–æ–¥–∞
                                fig.add_trace(go.Scatter(
                                    x=pd.to_datetime(trades_df['exit_timestamp'], unit='ms'),
                                    y=trades_df['exit_price'],
                                    mode='markers',
                                    name='–í—ã—Ö–æ–¥—ã –∏–∑ –ø–æ–∑–∏—Ü–∏–∏',
                                    marker=dict(
                                        size=8,
                                        color='red',
                                        symbol='triangle-down'
                                    )
                                ))
                            
                            fig.update_layout(
                                title=f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã {symbol} –∏ —Å–¥–µ–ª–∫–∏",
                                xaxis_title="–í—Ä–µ–º—è",
                                yaxis_title="–¶–µ–Ω–∞",
                                height=600
                            )                            
                            st.plotly_chart(fig, use_container_width=True)
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–¥–µ–ª–æ–∫
                            if not trades_df.empty:
                                st.subheader("–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
                                trades_df['timestamp'] = pd.to_datetime(trades_df['timestamp'], unit='ms')
                                trades_df['exit_timestamp'] = pd.to_datetime(trades_df['exit_timestamp'], unit='ms')
                                trades_df['profit'] = trades_df['profit'] * 100  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                                
                                display_df = trades_df[[
                                    'timestamp', 'exit_timestamp', 'entry_price',
                                    'exit_price', 'profit', 'exit_reason'
                                ]].rename(columns={
                                    'timestamp': '–í—Ä–µ–º—è –≤—Ö–æ–¥–∞',
                                    'exit_timestamp': '–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞',
                                    'entry_price': '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞',
                                    'exit_price': '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞',
                                    'profit': '–ü—Ä–∏–±—ã–ª—å (%)',
                                    'exit_reason': '–ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞'
                                })
                                
                                st.dataframe(display_df)
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                        
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            raise  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
